;;;; Filename: component2-tests.lisp

;;; Tests for ASDF component dependencies within a single system.

(in-package #:dep/tests)


(in-suite system-tests)


(test test-mixed-component-dependencies
  "Test dependencies between files and modules."
  (let* ((tracker (make-instance 'dep:dependency-tracker :system-name "test"))
         (temp-dir (uiop:ensure-directory-pathname
                     (asdf:system-relative-pathname :dependency-analyzer/tests "tmp")))
         (system-file (merge-pathnames "test-system.asd" temp-dir))
         (config-file (merge-pathnames "config.lisp" temp-dir))
         (feat-a-file (merge-pathnames "feature-a.lisp" temp-dir))
         (feat-b-file (merge-pathnames "feature-b.lisp" temp-dir)))
    (ensure-directories-exist temp-dir)
    (unwind-protect
        (progn
          (with-open-file (s system-file :direction :output :if-exists :supersede)
            (format s "(defsystem \"test-system\"~%")
            (format s "  :description \"Test system for mixed component dependencies\"~%")
            (format s "  :components~%")
            (format s "  ((:file \"config\")~%")
            (format s "   (:module \"features\"~%")
            (format s "     :depends-on (\"config\")~%")
            (format s "     :components~%")
            (format s "     ((:file \"feature-a\")~%")
            (format s "      (:file \"feature-b\")))))~%"))
          (with-open-file (s config-file :direction :output :if-exists :supersede)
            (format s "(defpackage #:test-system/config~%")
            (format s "  (:use #:cl)~%")
            (format s "  (:export #:*features-enabled*))~%")
            (format s "(in-package #:test-system/config)~%")
            (format s "(defvar *features-enabled* '(:a :b))~%"))
          (with-open-file (s feat-a-file :direction :output :if-exists :supersede)
            (format s "(defpackage #:test-system/feature-a~%")
            (format s "  (:use #:cl #:test-system/config))~%")
            (format s "(in-package #:test-system/feature-a)~%")
            (format s "(defun feature-a-enabled-p ()~%")
            (format s "  (member :a *features-enabled*))~%"))
          (with-open-file (s feat-b-file :direction :output :if-exists :supersede)
            (format s "(defpackage #:test-system/feature-b~%")
            (format s "  (:use #:cl #:test-system/config))~%")
            (format s "(in-package #:test-system/feature-b)~%")
            (format s "(defun feature-b-enabled-p ()~%")
            (format s "  (member :b *features-enabled*))~%"))
          (let ((asdf:*central-registry* (cons temp-dir asdf:*central-registry*)))
            (let ((system (asdf:find-system "test-system" nil)))
              (dep:parse-system (make-instance 'dep:system-parser 
                                               :tracker tracker 
                                               :system system))
              (let ((base-deps (dep:file-dependencies tracker config-file))
                    (feat-a-deps (dep:file-dependencies tracker feat-a-file))
                    (feat-b-deps (dep:file-dependencies tracker feat-b-file)))
                (is (null base-deps)
                    "Config file should have no dependencies as it is the base configuration")
                (is (member config-file feat-a-deps :test #'equal)
                    "Feature A should depend on config file through module dependency")
                (is (member config-file feat-b-deps :test #'equal)
                    "Feature B should depend on config file through module dependency")))))
      (when (probe-file system-file) (delete-file system-file))
      (when (probe-file config-file) (delete-file config-file))
      (when (probe-file feat-a-file) (delete-file feat-a-file))
      (when (probe-file feat-b-file) (delete-file feat-b-file))
      (when (probe-file temp-dir)
        (uiop:delete-directory-tree temp-dir :validate t))
      (asdf:clear-system "test-system")
      (dep:clear-tracker tracker))))


(test test-component-dependency-order
  "Test proper ordering of component dependencies."
  (let* ((tracker (make-instance 'dep:dependency-tracker :system-name "test"))
         (temp-dir (uiop:ensure-directory-pathname
                     (asdf:system-relative-pathname :dependency-analyzer/tests "tmp")))
         (system-file (merge-pathnames "test-system.asd" temp-dir))
         (base-file (merge-pathnames "base.lisp" temp-dir))
         (utils-file (merge-pathnames "utils.lisp" temp-dir))
         (main-file (merge-pathnames "main.lisp" temp-dir)))
    (ensure-directories-exist temp-dir)
    (unwind-protect
        (progn
          (with-open-file (s system-file :direction :output :if-exists :supersede)
            (format s "(defsystem \"test-system\"~%")
            (format s "  :description \"Test system for component dependency ordering\"~%")
            (format s "  :components~%")
            (format s "  ((:file \"base\")~%")
            (format s "   (:file \"utils\" :depends-on (\"base\"))~%")
            (format s "   (:file \"main\" :depends-on (\"utils\"))))~%"))
          (with-open-file (s base-file :direction :output :if-exists :supersede)
            (format s "(defpackage #:test-system/base~%")
            (format s "  (:use #:cl)~%")
            (format s "  (:export #:base-function))~%")
            (format s "(in-package #:test-system/base)~%")
            (format s "(defun base-function (x) (* x 2))~%"))
          (with-open-file (s utils-file :direction :output :if-exists :supersede)
            (format s "(defpackage #:test-system/utils~%")
            (format s "  (:use #:cl #:test-system/base)~%")
            (format s "  (:export #:util-function))~%")
            (format s "(in-package #:test-system/utils)~%")
            (format s "(defun util-function (x)~%")
            (format s "  (base-function (1+ x)))~%"))
          (with-open-file (s main-file :direction :output :if-exists :supersede)
            (format s "(defpackage #:test-system/main~%")
            (format s "  (:use #:cl #:test-system/utils))~%")
            (format s "(in-package #:test-system/main)~%")
            (format s "(defun main ()~%")
            (format s "  (util-function 10))~%"))
          (let ((asdf:*central-registry* (cons temp-dir asdf:*central-registry*)))
            (let ((system (asdf:find-system "test-system" nil)))
              (dep:parse-system (make-instance 'dep:system-parser 
                                               :tracker tracker 
                                               :system system))
              (let ((utils-deps (dep:file-dependencies tracker utils-file))
                    (main-deps (dep:file-dependencies tracker main-file)))
                (is (subsetp utils-deps main-deps :test #'equal)
                    "Main dependencies should transitively include all utils dependencies")
                (is (member base-file utils-deps :test #'equal)
                    "Utils should directly depend on base through declared dependency")
                (is (every (lambda (f) (member f main-deps :test #'equal))
                          (list base-file utils-file))
                    "Main should depend on both base and utils through transitive dependencies")))))
      (when (probe-file system-file) (delete-file system-file))
      (when (probe-file base-file) (delete-file base-file))
      (when (probe-file utils-file) (delete-file utils-file))
      (when (probe-file main-file) (delete-file main-file))
      (when (probe-file temp-dir)
        (uiop:delete-directory-tree temp-dir :validate t))
      (asdf:clear-system "test-system")
      (dep:clear-tracker tracker))))