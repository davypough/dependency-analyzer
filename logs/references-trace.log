
Reference Analysis Trace for d:/quicklisp/local-projects/test-project/src/defs.lisp

-------------------------------
WALK(ING):
  Expression: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
                (:USE :CL))
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: DEFPACKAGE
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: #:TEST-PROJECT-PACKAGE
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: (:USE :CL)
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: :USE
  Context: (:USE :CL)
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: :CL
  Context: (:USE :CL)
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))

-------------------------------
WALK(ING):
  Expression: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: IN-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: #:TEST-PROJECT-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)

-------------------------------
WALK(ING):
  Expression: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
                (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
                (MAX-SIZE 100 :TYPE FIXNUM))
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: DEFSTRUCT
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (CACHE (:CONC-NAME CACHE.))
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: CACHE
  Context: (CACHE (:CONC-NAME CACHE.))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (:CONC-NAME CACHE.)
  Context: (CACHE (:CONC-NAME CACHE.))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: :CONC-NAME
  Context: (:CONC-NAME CACHE.)
  Parent: (CACHE (:CONC-NAME CACHE.))
WALK(ING):
  Expression: CACHE.
  Context: (:CONC-NAME CACHE.)
  Parent: (CACHE (:CONC-NAME CACHE.))
WALK(ING):
  Expression: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: TABLE
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (MAKE-HASH-TABLE)
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: MAKE-HASH-TABLE
  Context: (MAKE-HASH-TABLE)
  Parent: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
WALK(ING):
  Expression: :TYPE
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: HASH-TABLE
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (MAX-SIZE 100 :TYPE FIXNUM)
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: MAX-SIZE
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: 100
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: :TYPE
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: FIXNUM
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))

-------------------------------
WALK(ING):
  Expression: (DEFCLASS VECTOR2D NIL
                        ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                         (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: DEFCLASS
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: VECTOR2D
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: NIL
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
               (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Context: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
            (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: X
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITARG
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :X
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITFORM
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: 0.0
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :ACCESSOR
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: V2D-X
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Context: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
            (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: Y
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITARG
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :Y
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITFORM
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: 0.0
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :ACCESSOR
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: V2D-Y
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))

-------------------------------
WALK(ING):
  Expression: (DEFGENERIC MAGNITUDE
                  (VECTOR)
                (:DOCUMENTATION "Calculate vector magnitude"))
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: DEFGENERIC
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: MAGNITUDE
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: (VECTOR)
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: VECTOR
  Context: (VECTOR)
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: (:DOCUMENTATION "Calculate vector magnitude")
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: :DOCUMENTATION
  Context: (:DOCUMENTATION "Calculate vector magnitude")
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: "Calculate vector magnitude"
  Context: (:DOCUMENTATION "Calculate vector magnitude")
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))

-------------------------------
WALK(ING):
  Expression: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: DEFVAR
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: (MAKE-CACHE)
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: MAKE-CACHE
  Context: (MAKE-CACHE)
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))

-------------------------------
WALK(ING):
  Expression: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: DEFPARAMETER
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: *ORIGIN*
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: (MAKE-INSTANCE 'VECTOR2D)
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: MAKE-INSTANCE
  Context: (MAKE-INSTANCE 'VECTOR2D)
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: 'VECTOR2D
  Context: (MAKE-INSTANCE 'VECTOR2D)
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))

-------------------------------
WALK(ING):
  Expression: (DEFUN CACHE-ENTRY (KEY)
                (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: DEFUN
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: CACHE-ENTRY
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: (KEY)
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: KEY
  Context: (KEY)
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: GETHASH
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: KEY
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: (CACHE.TABLE *DEFAULT-CACHE*)
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: CACHE.TABLE
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))

-------------------------------
WALK(ING):
  Expression: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
                (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: DEFUN
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (SETF CACHE-ENTRY)
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: SETF
  Context: (SETF CACHE-ENTRY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: CACHE-ENTRY
  Context: (SETF CACHE-ENTRY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (VALUE KEY)
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: VALUE
  Context: (VALUE KEY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: KEY
  Context: (VALUE KEY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: SETF
  Context: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Context: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: GETHASH
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
WALK(ING):
  Expression: KEY
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
WALK(ING):
  Expression: (CACHE.TABLE *DEFAULT-CACHE*)
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
WALK(ING):
  Expression: CACHE.TABLE
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
WALK(ING):
  Expression: VALUE
  Context: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))

-------------------------------
WALK(ING):
  Expression: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
                `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                   ,@BODY))
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: DEFMACRO
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: WITH-VECTOR
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: ((VAR X Y) &BODY BODY)
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: (VAR X Y)
  Context: ((VAR X Y) &BODY BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: VAR
  Context: (VAR X Y)
  Parent: ((VAR X Y) &BODY BODY)
WALK(ING):
  Expression: X
  Context: (VAR X Y)
  Parent: ((VAR X Y) &BODY BODY)
WALK(ING):
  Expression: Y
  Context: (VAR X Y)
  Parent: ((VAR X Y) &BODY BODY)
WALK(ING):
  Expression: &BODY
  Context: ((VAR X Y) &BODY BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: BODY
  Context: ((VAR X Y) &BODY BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                 ,@BODY)
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: SB-INT:QUASIQUOTE
  Context: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
              ,@BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY)
  Context: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
              ,@BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: LET
  Context: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
  Parent: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
WALK(ING):
  Expression: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
  Context: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
  Parent: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
WALK(ING):
  Expression: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
  Context: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
  Parent: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
            ,@BODY)
WALK(ING):
  Expression: ,VAR
  Context: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
  Parent: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
WALK(ING):
  Expression: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Context: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
  Parent: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
WALK(ING):
  Expression: MAKE-INSTANCE
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: 'VECTOR2D
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: :X
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: ,X
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: :Y
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: ,Y
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: ,@BODY
  Context: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
  Parent: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)

-------------------------------
WALK(ING):
  Expression: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
WALK(ING):
  Expression: DEFCONSTANT
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
WALK(ING):
  Expression: +UNIT-DISTANCE+
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
WALK(ING):
  Expression: 1.0
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)

-------------------------------
WALK(ING):
  Expression: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
  Context: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
WALK(ING):
  Expression: DEFMETHOD
  Context: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
WALK(ING):
  Expression: GF1
  Context: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
WALK(ING):
  Expression: ((X CONS))
  Context: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
WALK(ING):
  Expression: (X CONS)
  Context: ((X CONS))
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
WALK(ING):
  Expression: X
  Context: (X CONS)
  Parent: ((X CONS))
WALK(ING):
  Expression: CONS
  Context: (X CONS)
  Parent: ((X CONS))
WALK(ING):
  Expression: (FIRST X)
  Context: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
WALK(ING):
  Expression: FIRST
  Context: (FIRST X)
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))
WALK(ING):
  Expression: X
  Context: (FIRST X)
  Parent: (DEFMETHOD GF1 ((X CONS)) (FIRST X))

-------------------------------
WALK(ING):
  Expression: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
  Context: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: DEFMETHOD
  Context: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: GF2
  Context: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: ((X NUMBER) (Y NUMBER))
  Context: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: (X NUMBER)
  Context: ((X NUMBER) (Y NUMBER))
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: X
  Context: (X NUMBER)
  Parent: ((X NUMBER) (Y NUMBER))
WALK(ING):
  Expression: NUMBER
  Context: (X NUMBER)
  Parent: ((X NUMBER) (Y NUMBER))
WALK(ING):
  Expression: (Y NUMBER)
  Context: ((X NUMBER) (Y NUMBER))
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: Y
  Context: (Y NUMBER)
  Parent: ((X NUMBER) (Y NUMBER))
WALK(ING):
  Expression: NUMBER
  Context: (Y NUMBER)
  Parent: ((X NUMBER) (Y NUMBER))
WALK(ING):
  Expression: (< X Y)
  Context: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: <
  Context: (< X Y)
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: X
  Context: (< X Y)
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
WALK(ING):
  Expression: Y
  Context: (< X Y)
  Parent: (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))


Reference Analysis Trace for d:/quicklisp/local-projects/test-project/src/refs.lisp

-------------------------------
WALK(ING):
  Expression: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: IN-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: #:TEST-PROJECT-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)

REFERENCE>
    :Name #:TEST-PROJECT-PACKAGE
    :Context (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
    :Type :PACKAGE
    :File /src/refs.lisp
    :Definitions
                    DEFINITION>
                        :Name #:TEST-PROJECT-PACKAGE
                        :Context (DEFPACKAGE #:TEST-PROJECT-PACKAGE
                                   (:USE :CL))
                        :Type :PACKAGE
                        :File /src/defs.lisp


-------------------------------
WALK(ING):
  Expression: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
                (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: DEFMETHOD
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: MAGNITUDE
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: ((V VECTOR2D))
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: (V VECTOR2D)
  Context: ((V VECTOR2D))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: V
  Context: (V VECTOR2D)
  Parent: ((V VECTOR2D))
WALK(ING):
  Expression: VECTOR2D
  Context: (V VECTOR2D)
  Parent: ((V VECTOR2D))

REFERENCE>
    :Name VECTOR2D
    :Context ((V VECTOR2D))
    :Type :STRUCTURE/CLASS/CONDITION
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name VECTOR2D
                        :Context (DEFCLASS VECTOR2D NIL
                                           ((X :INITARG :X :INITFORM 0.0
                                             :ACCESSOR V2D-X)
                                            (Y :INITARG :Y :INITFORM 0.0
                                             :ACCESSOR V2D-Y)))
                        :Type :STRUCTURE/CLASS/CONDITION
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL

WALK(ING):
  Expression: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: SQRT
  Context: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Context: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: +
  Context: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Parent: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
WALK(ING):
  Expression: (EXPT (V2D-X V) 2)
  Context: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Parent: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
WALK(ING):
  Expression: EXPT
  Context: (EXPT (V2D-X V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: (V2D-X V)
  Context: (EXPT (V2D-X V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: V2D-X
  Context: (V2D-X V)
  Parent: (EXPT (V2D-X V) 2)
WALK(ING):
  Expression: V
  Context: (V2D-X V)
  Parent: (EXPT (V2D-X V) 2)
WALK(ING):
  Expression: 2
  Context: (EXPT (V2D-X V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: (EXPT (V2D-Y V) 2)
  Context: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Parent: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
WALK(ING):
  Expression: EXPT
  Context: (EXPT (V2D-Y V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: (V2D-Y V)
  Context: (EXPT (V2D-Y V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: V2D-Y
  Context: (V2D-Y V)
  Parent: (EXPT (V2D-Y V) 2)
WALK(ING):
  Expression: V
  Context: (V2D-Y V)
  Parent: (EXPT (V2D-Y V) 2)
WALK(ING):
  Expression: 2
  Context: (EXPT (V2D-Y V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))

REFERENCE>
    :Name V2D-Y
    :Context (DEFMETHOD MAGNITUDE ((V VECTOR2D))
               (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments (#<VECTOR2D {11048AD783}>)
    :Definitions
                    DEFINITION>
                        :Name V2D-Y
                        :Context (DEFCLASS VECTOR2D NIL
                                           ((X :INITARG :X :INITFORM 0.0
                                             :ACCESSOR V2D-X)
                                            (Y :INITARG :Y :INITFORM 0.0
                                             :ACCESSOR V2D-Y)))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (VECTOR2D)


REFERENCE>
    :Name V2D-X
    :Context (DEFMETHOD MAGNITUDE ((V VECTOR2D))
               (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments (#<VECTOR2D {11048AD783}>)
    :Definitions
                    DEFINITION>
                        :Name V2D-X
                        :Context (DEFCLASS VECTOR2D NIL
                                           ((X :INITARG :X :INITFORM 0.0
                                             :ACCESSOR V2D-X)
                                            (Y :INITARG :Y :INITFORM 0.0
                                             :ACCESSOR V2D-Y)))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (VECTOR2D)


-------------------------------
WALK(ING):
  Expression: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                    (RESULT (SORT (LIST 1 3 2) #'GF2)))
                RESULT
                (V2D-X V)
                (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
                (FUNCALL #'V2D-Y V)
                (APPLY #'GF2 (LIST 1 2))
                (MAPCAR #'V2D-Y (LIST V)))
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: LET
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
               (RESULT (SORT (LIST 1 3 2) #'GF2)))
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
  Context: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
            (RESULT (SORT (LIST 1 3 2) #'GF2)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: V
  Context: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
  Parent: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
           (RESULT (SORT (LIST 1 3 2) #'GF2)))
WALK(ING):
  Expression: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Context: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
  Parent: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
           (RESULT (SORT (LIST 1 3 2) #'GF2)))
WALK(ING):
  Expression: MAKE-INSTANCE
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: 'VECTOR2D
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: :X
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: 3.0
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: :Y
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: 4.0
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: (RESULT (SORT (LIST 1 3 2) #'GF2))
  Context: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
            (RESULT (SORT (LIST 1 3 2) #'GF2)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: RESULT
  Context: (RESULT (SORT (LIST 1 3 2) #'GF2))
  Parent: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
           (RESULT (SORT (LIST 1 3 2) #'GF2)))
WALK(ING):
  Expression: (SORT (LIST 1 3 2) #'GF2)
  Context: (RESULT (SORT (LIST 1 3 2) #'GF2))
  Parent: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
           (RESULT (SORT (LIST 1 3 2) #'GF2)))
WALK(ING):
  Expression: SORT
  Context: (SORT (LIST 1 3 2) #'GF2)
  Parent: (RESULT (SORT (LIST 1 3 2) #'GF2))
WALK(ING):
  Expression: (LIST 1 3 2)
  Context: (SORT (LIST 1 3 2) #'GF2)
  Parent: (RESULT (SORT (LIST 1 3 2) #'GF2))
WALK(ING):
  Expression: LIST
  Context: (LIST 1 3 2)
  Parent: (SORT (LIST 1 3 2) #'GF2)
WALK(ING):
  Expression: 1
  Context: (LIST 1 3 2)
  Parent: (SORT (LIST 1 3 2) #'GF2)
WALK(ING):
  Expression: 3
  Context: (LIST 1 3 2)
  Parent: (SORT (LIST 1 3 2) #'GF2)
WALK(ING):
  Expression: 2
  Context: (LIST 1 3 2)
  Parent: (SORT (LIST 1 3 2) #'GF2)
WALK(ING):
  Expression: #'GF2
  Context: (SORT (LIST 1 3 2) #'GF2)
  Parent: (RESULT (SORT (LIST 1 3 2) #'GF2))
WALK(ING):
  Expression: FUNCTION
  Context: #'GF2
  Parent: (SORT (LIST 1 3 2) #'GF2)
WALK(ING):
  Expression: GF2
  Context: #'GF2
  Parent: (SORT (LIST 1 3 2) #'GF2)
WALK(ING):
  Expression: RESULT
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: (V2D-X V)
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: V2D-X
  Context: (V2D-X V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: V
  Context: (V2D-X V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: REMOVE
  Context: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: 'B
  Context: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: '((A) (B) (C))
  Context: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: :KEY
  Context: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: #'GF1
  Context: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: FUNCTION
  Context: #'GF1
  Parent: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
WALK(ING):
  Expression: GF1
  Context: #'GF1
  Parent: (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
WALK(ING):
  Expression: (FUNCALL #'V2D-Y V)
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'V2D-Y V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: #'V2D-Y
  Context: (FUNCALL #'V2D-Y V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: FUNCTION
  Context: #'V2D-Y
  Parent: (FUNCALL #'V2D-Y V)
WALK(ING):
  Expression: V2D-Y
  Context: #'V2D-Y
  Parent: (FUNCALL #'V2D-Y V)
WALK(ING):
  Expression: V
  Context: (FUNCALL #'V2D-Y V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: (APPLY #'GF2 (LIST 1 2))
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: APPLY
  Context: (APPLY #'GF2 (LIST 1 2))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: #'GF2
  Context: (APPLY #'GF2 (LIST 1 2))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: FUNCTION
  Context: #'GF2
  Parent: (APPLY #'GF2 (LIST 1 2))
WALK(ING):
  Expression: GF2
  Context: #'GF2
  Parent: (APPLY #'GF2 (LIST 1 2))
WALK(ING):
  Expression: (LIST 1 2)
  Context: (APPLY #'GF2 (LIST 1 2))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: LIST
  Context: (LIST 1 2)
  Parent: (APPLY #'GF2 (LIST 1 2))
WALK(ING):
  Expression: 1
  Context: (LIST 1 2)
  Parent: (APPLY #'GF2 (LIST 1 2))
WALK(ING):
  Expression: 2
  Context: (LIST 1 2)
  Parent: (APPLY #'GF2 (LIST 1 2))
WALK(ING):
  Expression: (MAPCAR #'V2D-Y (LIST V))
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                 (RESULT (SORT (LIST 1 3 2) #'GF2)))
             RESULT
             (V2D-X V)
             (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
             (FUNCALL #'V2D-Y V)
             (APPLY #'GF2 (LIST 1 2))
             (MAPCAR #'V2D-Y (LIST V)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: MAPCAR
  Context: (MAPCAR #'V2D-Y (LIST V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: #'V2D-Y
  Context: (MAPCAR #'V2D-Y (LIST V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: FUNCTION
  Context: #'V2D-Y
  Parent: (MAPCAR #'V2D-Y (LIST V))
WALK(ING):
  Expression: V2D-Y
  Context: #'V2D-Y
  Parent: (MAPCAR #'V2D-Y (LIST V))
WALK(ING):
  Expression: (LIST V)
  Context: (MAPCAR #'V2D-Y (LIST V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                (RESULT (SORT (LIST 1 3 2) #'GF2)))
            RESULT
            (V2D-X V)
            (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
            (FUNCALL #'V2D-Y V)
            (APPLY #'GF2 (LIST 1 2))
            (MAPCAR #'V2D-Y (LIST V)))
WALK(ING):
  Expression: LIST
  Context: (LIST V)
  Parent: (MAPCAR #'V2D-Y (LIST V))
WALK(ING):
  Expression: V
  Context: (LIST V)
  Parent: (MAPCAR #'V2D-Y (LIST V))

REFERENCE>
    :Name V2D-Y
    :Context (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                   (RESULT (SORT (LIST 1 3 2) #'GF2)))
               RESULT
               (V2D-X V)
               (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
               (FUNCALL #'V2D-Y V)
               (APPLY #'GF2 (LIST 1 2))
               (MAPCAR #'V2D-Y (LIST V)))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments (#<VECTOR2D {1104C2C403}>)
    :Definitions
                    DEFINITION>
                        :Name V2D-Y
                        :Context (DEFCLASS VECTOR2D NIL
                                           ((X :INITARG :X :INITFORM 0.0
                                             :ACCESSOR V2D-X)
                                            (Y :INITARG :Y :INITFORM 0.0
                                             :ACCESSOR V2D-Y)))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (VECTOR2D)


REFERENCE>
    :Name GF2
    :Context (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                   (RESULT (SORT (LIST 1 3 2) #'GF2)))
               RESULT
               (V2D-X V)
               (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
               (FUNCALL #'V2D-Y V)
               (APPLY #'GF2 (LIST 1 2))
               (MAPCAR #'V2D-Y (LIST V)))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments (1 2)
    :Definitions
                    DEFINITION>
                        :Name GF2
                        :Context (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (NUMBER NUMBER)


REFERENCE>
    :Name V2D-Y
    :Context (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                   (RESULT (SORT (LIST 1 3 2) #'GF2)))
               RESULT
               (V2D-X V)
               (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
               (FUNCALL #'V2D-Y V)
               (APPLY #'GF2 (LIST 1 2))
               (MAPCAR #'V2D-Y (LIST V)))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments (#<VECTOR2D {1104C2C403}>)
    :Definitions
                    DEFINITION>
                        :Name V2D-Y
                        :Context (DEFCLASS VECTOR2D NIL
                                           ((X :INITARG :X :INITFORM 0.0
                                             :ACCESSOR V2D-X)
                                            (Y :INITARG :Y :INITFORM 0.0
                                             :ACCESSOR V2D-Y)))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (VECTOR2D)


REFERENCE>
    :Name GF1
    :Context (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                   (RESULT (SORT (LIST 1 3 2) #'GF2)))
               RESULT
               (V2D-X V)
               (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
               (FUNCALL #'V2D-Y V)
               (APPLY #'GF2 (LIST 1 2))
               (MAPCAR #'V2D-Y (LIST V)))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments ('(A))
    :Definitions
                    DEFINITION>
                        :Name GF1
                        :Context (DEFMETHOD GF1 ((X CONS)) (FIRST X))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (CONS)


REFERENCE>
    :Name V2D-X
    :Context (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                   (RESULT (SORT (LIST 1 3 2) #'GF2)))
               RESULT
               (V2D-X V)
               (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
               (FUNCALL #'V2D-Y V)
               (APPLY #'GF2 (LIST 1 2))
               (MAPCAR #'V2D-Y (LIST V)))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments (#<VECTOR2D {1104C2C403}>)
    :Definitions
                    DEFINITION>
                        :Name V2D-X
                        :Context (DEFCLASS VECTOR2D NIL
                                           ((X :INITARG :X :INITFORM 0.0
                                             :ACCESSOR V2D-X)
                                            (Y :INITARG :Y :INITFORM 0.0
                                             :ACCESSOR V2D-Y)))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (VECTOR2D)


REFERENCE>
    :Name GF2
    :Context (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
                   (RESULT (SORT (LIST 1 3 2) #'GF2)))
               RESULT
               (V2D-X V)
               (REMOVE 'B '((A) (B) (C)) :KEY #'GF1)
               (FUNCALL #'V2D-Y V)
               (APPLY #'GF2 (LIST 1 2))
               (MAPCAR #'V2D-Y (LIST V)))
    :Type :METHOD
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Arguments (1 1)
    :Definitions
                    DEFINITION>
                        :Name GF2
                        :Context (DEFMETHOD GF2 ((X NUMBER) (Y NUMBER)) (< X Y))
                        :Type :METHOD
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL
                        :Specializers (NUMBER NUMBER)


-------------------------------
WALK(ING):
  Expression: (CACHE-ENTRY 'KEY)
  Context: (CACHE-ENTRY 'KEY)
  Parent: (CACHE-ENTRY 'KEY)
WALK(ING):
  Expression: CACHE-ENTRY
  Context: (CACHE-ENTRY 'KEY)
  Parent: (CACHE-ENTRY 'KEY)

REFERENCE>
    :Name CACHE-ENTRY
    :Context (CACHE-ENTRY 'KEY)
    :Type :FUNCTION
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name CACHE-ENTRY
                        :Context (DEFUN CACHE-ENTRY (KEY)
                                   (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
                        :Type :FUNCTION
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL

WALK(ING):
  Expression: 'KEY
  Context: (CACHE-ENTRY 'KEY)
  Parent: (CACHE-ENTRY 'KEY)

-------------------------------
WALK(ING):
  Expression: (SETF (CACHE-ENTRY 'TEST) 42)
  Context: (SETF (CACHE-ENTRY 'TEST) 42)
  Parent: (SETF (CACHE-ENTRY 'TEST) 42)
WALK(ING):
  Expression: SETF
  Context: (SETF (CACHE-ENTRY 'TEST) 42)
  Parent: (SETF (CACHE-ENTRY 'TEST) 42)
WALK(ING):
  Expression: (CACHE-ENTRY 'TEST)
  Context: (SETF (CACHE-ENTRY 'TEST) 42)
  Parent: (SETF (CACHE-ENTRY 'TEST) 42)
WALK(ING):
  Expression: CACHE-ENTRY
  Context: (CACHE-ENTRY 'TEST)
  Parent: (SETF (CACHE-ENTRY 'TEST) 42)

REFERENCE>
    :Name CACHE-ENTRY
    :Context (SETF (CACHE-ENTRY 'TEST) 42)
    :Type :FUNCTION
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name CACHE-ENTRY
                        :Context (DEFUN CACHE-ENTRY (KEY)
                                   (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
                        :Type :FUNCTION
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL

WALK(ING):
  Expression: 'TEST
  Context: (CACHE-ENTRY 'TEST)
  Parent: (SETF (CACHE-ENTRY 'TEST) 42)
WALK(ING):
  Expression: 42
  Context: (SETF (CACHE-ENTRY 'TEST) 42)
  Parent: (SETF (CACHE-ENTRY 'TEST) 42)

-------------------------------
WALK(ING):
  Expression: (CACHE.MAX-SIZE *DEFAULT-CACHE*)
  Context: (CACHE.MAX-SIZE *DEFAULT-CACHE*)
  Parent: (CACHE.MAX-SIZE *DEFAULT-CACHE*)
WALK(ING):
  Expression: CACHE.MAX-SIZE
  Context: (CACHE.MAX-SIZE *DEFAULT-CACHE*)
  Parent: (CACHE.MAX-SIZE *DEFAULT-CACHE*)

REFERENCE>
    :Name CACHE.MAX-SIZE
    :Context (CACHE.MAX-SIZE *DEFAULT-CACHE*)
    :Type :FUNCTION
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name CACHE.MAX-SIZE
                        :Context (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
                                   (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
                                   (MAX-SIZE 100 :TYPE FIXNUM))
                        :Type :FUNCTION
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL

WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: (CACHE.MAX-SIZE *DEFAULT-CACHE*)
  Parent: (CACHE.MAX-SIZE *DEFAULT-CACHE*)

REFERENCE>
    :Name *DEFAULT-CACHE*
    :Context (CACHE.MAX-SIZE *DEFAULT-CACHE*)
    :Type :VARIABLE
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name *DEFAULT-CACHE*
                        :Context (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
                        :Type :VARIABLE
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL


-------------------------------
WALK(ING):
  Expression: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
                (MAGNITUDE V))
  Context: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
             (MAGNITUDE V))
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))
WALK(ING):
  Expression: WITH-VECTOR
  Context: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
             (MAGNITUDE V))
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))

REFERENCE>
    :Name WITH-VECTOR
    :Context (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
               (MAGNITUDE V))
    :Type :MACRO
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name WITH-VECTOR
                        :Context (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
                                   `(LET ((,VAR
                                           (MAKE-INSTANCE 'VECTOR2D :X ,X :Y
                                                          ,Y)))
                                      ,@BODY))
                        :Type :MACRO
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL

WALK(ING):
  Expression: (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
  Context: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
             (MAGNITUDE V))
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))
WALK(ING):
  Expression: V
  Context: (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))
WALK(ING):
  Expression: +UNIT-DISTANCE+
  Context: (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))

REFERENCE>
    :Name +UNIT-DISTANCE+
    :Context (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
               (MAGNITUDE V))
    :Type :VARIABLE
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name +UNIT-DISTANCE+
                        :Context (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
                        :Type :VARIABLE
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL

WALK(ING):
  Expression: +UNIT-DISTANCE+
  Context: (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))

REFERENCE>
    :Name +UNIT-DISTANCE+
    :Context (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
               (MAGNITUDE V))
    :Type :VARIABLE
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name +UNIT-DISTANCE+
                        :Context (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
                        :Type :VARIABLE
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL

WALK(ING):
  Expression: (MAGNITUDE V)
  Context: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
             (MAGNITUDE V))
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))
WALK(ING):
  Expression: MAGNITUDE
  Context: (MAGNITUDE V)
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))
WALK(ING):
  Expression: V
  Context: (MAGNITUDE V)
  Parent: (WITH-VECTOR (V +UNIT-DISTANCE+ +UNIT-DISTANCE+)
            (MAGNITUDE V))

-------------------------------
WALK(ING):
  Expression: *ORIGIN*
  Context: *ORIGIN*
  Parent: *ORIGIN*

REFERENCE>
    :Name *ORIGIN*
    :Context *ORIGIN*
    :Type :VARIABLE
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name *ORIGIN*
                        :Context (DEFPARAMETER *ORIGIN*
                                   (MAKE-INSTANCE 'VECTOR2D))
                        :Type :VARIABLE
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL


-------------------------------
WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: *DEFAULT-CACHE*
  Parent: *DEFAULT-CACHE*

REFERENCE>
    :Name *DEFAULT-CACHE*
    :Context *DEFAULT-CACHE*
    :Type :VARIABLE
    :File /src/refs.lisp
    :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
    :Visibility (:LOCAL #<PACKAGE "TEST-PROJECT-PACKAGE">)
    :Definitions
                    DEFINITION>
                        :Name *DEFAULT-CACHE*
                        :Context (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
                        :Type :VARIABLE
                        :File /src/defs.lisp
                        :Package #<PACKAGE "TEST-PROJECT-PACKAGE">
                        :Status :INTERNAL


