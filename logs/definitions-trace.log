
Definitions Analysis Trace for d:/quicklisp/local-projects/test-project/source/single-pkg-defs.lisp

-------------------------------
WALK(ING):
  Expression: (DEFPACKAGE #:USER-MAIN-PACKAGE
                (:USE :CL))
  Context: (DEFPACKAGE #:USER-MAIN-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:USER-MAIN-PACKAGE
            (:USE :CL))
  Depth: 0
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                      '("CL") 'NIL 'NIL 'NIL ...))
  Context: (DEFPACKAGE #:USER-MAIN-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:USER-MAIN-PACKAGE
            (:USE :CL))
  Depth: 0
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                   '("CL") 'NIL 'NIL 'NIL ...))
  Parent: (DEFPACKAGE #:USER-MAIN-PACKAGE
            (:USE :CL))
  Depth: 1
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                   '("CL") 'NIL 'NIL 'NIL ...))
  Parent: (DEFPACKAGE #:USER-MAIN-PACKAGE
            (:USE :CL))
  Depth: 1
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                    '("CL") 'NIL 'NIL 'NIL ...)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                   '("CL") 'NIL 'NIL 'NIL ...))
  Parent: (DEFPACKAGE #:USER-MAIN-PACKAGE
            (:USE :CL))
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFPACKAGE
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: "USER-MAIN-PACKAGE"
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: '("CL")
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: '("USER-MAIN-PACKAGE")
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                 '("CL") 'NIL 'NIL 'NIL ...)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL
                                  '("CL") 'NIL 'NIL 'NIL ...))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-IMPL::%DEFPACKAGE "USER-MAIN-PACKAGE" 'NIL 'NIL 'NIL 'NIL '("CL")
                                'NIL 'NIL 'NIL ...)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Context: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 0
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SETQ *PACKAGE*
                        (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                         "USER-MAIN-PACKAGE")))
  Context: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 0
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SETQ *PACKAGE*
                     (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                      "USER-MAIN-PACKAGE")))
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 1
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SETQ *PACKAGE*
                     (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                      "USER-MAIN-PACKAGE")))
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 1
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: (SETQ *PACKAGE*
                      (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                       "USER-MAIN-PACKAGE"))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SETQ *PACKAGE*
                     (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                      "USER-MAIN-PACKAGE")))
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 1
WALK(ING):
  Expression: SETQ
  Context: (SETQ *PACKAGE*
                   (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: *PACKAGE*
  Context: (SETQ *PACKAGE*
                   (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE")
  Context: (SETQ *PACKAGE*
                   (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
  Context: (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE")
  Parent: (SETQ *PACKAGE*
                  (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Depth: 3
WALK(ING):
  Expression: "USER-MAIN-PACKAGE"
  Context: (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE")
  Parent: (SETQ *PACKAGE*
                  (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFVAR *DEFVAR-VARIABLE* 0)
  Context: (DEFVAR *DEFVAR-VARIABLE* 0)
  Parent: (DEFVAR *DEFVAR-VARIABLE* 0)
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
               (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Context: (DEFVAR *DEFVAR-VARIABLE* 0)
  Parent: (DEFVAR *DEFVAR-VARIABLE* 0)
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
            (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Parent: (DEFVAR *DEFVAR-VARIABLE* 0)
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
            (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Parent: (DEFVAR *DEFVAR-VARIABLE* 0)
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%COMPILER-DEFVAR
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: '*DEFVAR-VARIABLE*
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Depth: 4
WALK(ING):
  Expression: *DEFVAR-VARIABLE*
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
            (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Parent: (DEFVAR *DEFVAR-VARIABLE* 0)
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFVAR
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Depth: 2
WALK(ING):
  Expression: '*DEFVAR-VARIABLE*
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Depth: 3
WALK(ING):
  Expression: *DEFVAR-VARIABLE*
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Depth: 3
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Depth: 3
WALK(ING):
  Expression: '0
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION) '0))
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Context: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Parent: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
               (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                       (SB-C:SOURCE-LOCATION)))
  Context: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Parent: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
            (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
            (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%COMPILER-DEFVAR
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: '*DEFPARAMETER-VARIABLE*
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Depth: 4
WALK(ING):
  Expression: *DEFPARAMETER-VARIABLE*
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                      (SB-C:SOURCE-LOCATION))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
            (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFPARAMETER
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: '*DEFPARAMETER-VARIABLE*
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                  (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: *DEFPARAMETER-VARIABLE*
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                  (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: 0
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                  (SB-C:SOURCE-LOCATION))
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Context: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Parent: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Depth: 0
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                       (SB-C:SOURCE-LOCATION)))
  Context: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Parent: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Depth: 0
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Depth: 1
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Depth: 1
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                     (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (DEFCONSTANT +DEFCONSTANT-VARIABLE+ 'C)
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFCONSTANT
  Context: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                  (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: '+DEFCONSTANT-VARIABLE+
  Context: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                  (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: '+DEFCONSTANT-VARIABLE+
  Parent: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                 (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: +DEFCONSTANT-VARIABLE+
  Context: '+DEFCONSTANT-VARIABLE+
  Parent: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                 (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: 'C
  Context: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                  (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'C
  Parent: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                 (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: C
  Context: 'C
  Parent: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                 (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                  (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-IMPL::%DEFCONSTANT '+DEFCONSTANT-VARIABLE+ 'C
                                 (SB-C:SOURCE-LOCATION))
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFVAR *DEFVAR-VARIABLE*
                (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Context: (DEFVAR *DEFVAR-VARIABLE* (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Parent: (DEFVAR *DEFVAR-VARIABLE* (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
               (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                                 (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                                   (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Context: (DEFVAR *DEFVAR-VARIABLE* (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Parent: (DEFVAR *DEFVAR-VARIABLE* (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
            (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                              (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                                (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Parent: (DEFVAR *DEFVAR-VARIABLE* (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
            (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                              (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                                (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Parent: (DEFVAR *DEFVAR-VARIABLE* (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%COMPILER-DEFVAR
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: '*DEFVAR-VARIABLE*
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Depth: 4
WALK(ING):
  Expression: *DEFVAR-VARIABLE*
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*)
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                                (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                                  (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
            (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                              (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                                (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Parent: (DEFVAR *DEFVAR-VARIABLE* (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFVAR
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: '*DEFVAR-VARIABLE*
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: *DEFVAR-VARIABLE*
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                  NIL
                  (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Context: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFVAR-VARIABLE*))
           (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                             (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))))
  Depth: 2
WALK(ING):
  Expression: IF
  Context: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
               NIL
               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
  Context: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
               NIL
               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: SB-INT:%BOUNDP
  Context: (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
  Parent: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
              NIL
              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 4
WALK(ING):
  Expression: '*DEFVAR-VARIABLE*
  Context: (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
  Parent: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
              NIL
              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
  Depth: 5
WALK(ING):
  Expression: *DEFVAR-VARIABLE*
  Context: '*DEFVAR-VARIABLE*
  Parent: (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
  Depth: 5
WALK(ING):
  Expression: NIL
  Context: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
               NIL
               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)
  Context: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
               NIL
               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
               (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                       (SB-C:SOURCE-LOCATION)))
  Context: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
               NIL
               (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Parent: (SB-IMPL::%DEFVAR '*DEFVAR-VARIABLE* (SB-C:SOURCE-LOCATION)
                            (UNLESS (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
                              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0)))
  Depth: 3
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
            (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
              NIL
              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
            (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
              NIL
              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 4
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 5
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 5
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Depth: 6
WALK(ING):
  Expression: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 5
WALK(ING):
  Expression: SB-IMPL::%COMPILER-DEFVAR
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Depth: 6
WALK(ING):
  Expression: '*DEFPARAMETER-VARIABLE*
  Context: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
  Depth: 6
WALK(ING):
  Expression: QUOTE
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Depth: 7
WALK(ING):
  Expression: *DEFPARAMETER-VARIABLE*
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*)
  Depth: 7
WALK(ING):
  Expression: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                      (SB-C:SOURCE-LOCATION))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
            (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                    (SB-C:SOURCE-LOCATION)))
  Parent: (IF (SB-INT:%BOUNDP '*DEFVAR-VARIABLE*)
              NIL
              (DEFPARAMETER *DEFPARAMETER-VARIABLE* 0))
  Depth: 4
WALK(ING):
  Expression: SB-IMPL::%DEFPARAMETER
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 5
WALK(ING):
  Expression: '*DEFPARAMETER-VARIABLE*
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                  (SB-C:SOURCE-LOCATION))
  Depth: 6
WALK(ING):
  Expression: *DEFPARAMETER-VARIABLE*
  Context: '*DEFPARAMETER-VARIABLE*
  Parent: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                  (SB-C:SOURCE-LOCATION))
  Depth: 6
WALK(ING):
  Expression: 0
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 5
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-IMPL::%COMPILER-DEFVAR '*DEFPARAMETER-VARIABLE*))
           (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                   (SB-C:SOURCE-LOCATION)))
  Depth: 5
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-IMPL::%DEFPARAMETER '*DEFPARAMETER-VARIABLE* 0
                                  (SB-C:SOURCE-LOCATION))
  Depth: 6

-------------------------------
WALK(ING):
  Expression: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Context: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Parent: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Depth: 0
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                                 (SB-C:SOURCE-LOCATION)))
  Context: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Parent: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Depth: 0
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                              (SB-C:SOURCE-LOCATION)))
  Parent: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Depth: 1
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                              (SB-C:SOURCE-LOCATION)))
  Parent: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Depth: 1
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                             (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                             (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                             (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                               (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                              (SB-C:SOURCE-LOCATION)))
  Parent: (DECLAIM (SPECIAL *SYMBOL-VALUE-VARIABLE*))
  Depth: 1
WALK(ING):
  Expression: SB-C::%PROCLAIM
  Context: (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                             (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
  Context: (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                             (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                             (SB-C:SOURCE-LOCATION)))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-C::%PROCLAIM '(SPECIAL *SYMBOL-VALUE-VARIABLE*)
                           (SB-C:SOURCE-LOCATION))
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Context: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Parent: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Depth: 0
WALK(ING):
  Expression: (SET '*SYMBOL-VALUE-VARIABLE* 0)
  Context: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Parent: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Depth: 0
WALK(ING):
  Expression: SET
  Context: (SET '*SYMBOL-VALUE-VARIABLE* 0)
  Parent: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Depth: 1
WALK(ING):
  Expression: '*SYMBOL-VALUE-VARIABLE*
  Context: (SET '*SYMBOL-VALUE-VARIABLE* 0)
  Parent: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Depth: 1
WALK(ING):
  Expression: QUOTE
  Context: '*SYMBOL-VALUE-VARIABLE*
  Parent: (SET '*SYMBOL-VALUE-VARIABLE* 0)
  Depth: 2
WALK(ING):
  Expression: *SYMBOL-VALUE-VARIABLE*
  Context: '*SYMBOL-VALUE-VARIABLE*
  Parent: (SET '*SYMBOL-VALUE-VARIABLE* 0)
  Depth: 2
WALK(ING):
  Expression: 0
  Context: (SET '*SYMBOL-VALUE-VARIABLE* 0)
  Parent: (SETF (SYMBOL-VALUE '*SYMBOL-VALUE-VARIABLE*) 0)
  Depth: 1

-------------------------------
WALK(ING):
  Expression: (DEFUN DEFUN-NAME () 0)
  Context: (DEFUN DEFUN-NAME () 0)
  Parent: (DEFUN DEFUN-NAME () 0)
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
               (SB-IMPL::%DEFUN 'DEFUN-NAME
                                (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                    NIL
                                  (BLOCK DEFUN-NAME 0))))
  Context: (DEFUN DEFUN-NAME () 0)
  Parent: (DEFUN DEFUN-NAME () 0)
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
            (SB-IMPL::%DEFUN 'DEFUN-NAME
                             (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                 NIL
                               (BLOCK DEFUN-NAME 0))))
  Parent: (DEFUN DEFUN-NAME () 0)
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
            (SB-IMPL::%DEFUN 'DEFUN-NAME
                             (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                 NIL
                               (BLOCK DEFUN-NAME 0))))
  Parent: (DEFUN DEFUN-NAME () 0)
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
           (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
           (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
           (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0))))
  Depth: 2
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: 'DEFUN-NAME
  Context: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'DEFUN-NAME
  Parent: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Depth: 4
WALK(ING):
  Expression: DEFUN-NAME
  Context: 'DEFUN-NAME
  Parent: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Depth: 4
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'DEFUN-NAME
                               (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                   NIL
                                 (BLOCK DEFUN-NAME 0)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
            (SB-IMPL::%DEFUN 'DEFUN-NAME
                             (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                 NIL
                               (BLOCK DEFUN-NAME 0))))
  Parent: (DEFUN DEFUN-NAME () 0)
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
           (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0))))
  Depth: 2
WALK(ING):
  Expression: 'DEFUN-NAME
  Context: (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
           (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0))))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'DEFUN-NAME
  Parent: (SB-IMPL::%DEFUN 'DEFUN-NAME
                           (SB-INT:NAMED-LAMBDA DEFUN-NAME
                               NIL
                             (BLOCK DEFUN-NAME 0)))
  Depth: 3
WALK(ING):
  Expression: DEFUN-NAME
  Context: 'DEFUN-NAME
  Parent: (SB-IMPL::%DEFUN 'DEFUN-NAME
                           (SB-INT:NAMED-LAMBDA DEFUN-NAME
                               NIL
                             (BLOCK DEFUN-NAME 0)))
  Depth: 3
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA DEFUN-NAME
                  NIL
                (BLOCK DEFUN-NAME 0))
  Context: (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
           (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0))))
  Depth: 2
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA DEFUN-NAME
                    NIL
                  (BLOCK DEFUN-NAME 0))
  Context: (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'DEFUN-NAME T NIL NIL))
           (SB-IMPL::%DEFUN 'DEFUN-NAME
                            (SB-INT:NAMED-LAMBDA DEFUN-NAME
                                NIL
                              (BLOCK DEFUN-NAME 0))))
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Context: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Parent: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 0
WALK(ING):
  Expression: (LET* ((#:NEW194 (LAMBDA () 0)))
                (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194
                         'SYMBOL-FUNCTION-NAME))
  Context: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Parent: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 0
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:NEW194 (LAMBDA () 0)))
             (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Parent: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 1
WALK(ING):
  Expression: ((#:NEW194 (LAMBDA () 0)))
  Context: (LET* ((#:NEW194 (LAMBDA () 0)))
             (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Parent: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 1
WALK(ING):
  Expression: (#:NEW194 (LAMBDA () 0))
  Context: ((#:NEW194 (LAMBDA () 0)))
  Parent: (LET* ((#:NEW194 (LAMBDA () 0)))
            (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #:NEW194
  Context: (#:NEW194 (LAMBDA () 0))
  Parent: ((#:NEW194 (LAMBDA () 0)))
  Depth: 3
WALK(ING):
  Expression: (LAMBDA () 0)
  Context: (#:NEW194 (LAMBDA () 0))
  Parent: ((#:NEW194 (LAMBDA () 0)))
  Depth: 3
WALK(ING):
  Expression: #'(LAMBDA () 0)
  Context: (#:NEW194 (LAMBDA () 0))
  Parent: ((#:NEW194 (LAMBDA () 0)))
  Depth: 3
WALK(ING):
  Expression: (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME)
  Context: (LET* ((#:NEW194 (LAMBDA () 0)))
             (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Parent: (SETF (SYMBOL-FUNCTION 'SYMBOL-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 1
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME)
  Parent: (LET* ((#:NEW194 (LAMBDA () 0)))
            (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #'(SETF SYMBOL-FUNCTION)
  Context: (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME)
  Parent: (LET* ((#:NEW194 (LAMBDA () 0)))
            (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #:NEW194
  Context: (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME)
  Parent: (LET* ((#:NEW194 (LAMBDA () 0)))
            (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: 'SYMBOL-FUNCTION-NAME
  Context: (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME)
  Parent: (LET* ((#:NEW194 (LAMBDA () 0)))
            (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'SYMBOL-FUNCTION-NAME
  Parent: (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME)
  Depth: 3
WALK(ING):
  Expression: SYMBOL-FUNCTION-NAME
  Context: 'SYMBOL-FUNCTION-NAME
  Parent: (FUNCALL #'(SETF SYMBOL-FUNCTION) #:NEW194 'SYMBOL-FUNCTION-NAME)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Context: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Parent: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 0
WALK(ING):
  Expression: (LET* ((#:NEW195 (LAMBDA () 0)))
                (FUNCALL #'(SETF FDEFINITION) #:NEW195
                         'FDEFINITION-FUNCTION-NAME))
  Context: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Parent: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 0
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:NEW195 (LAMBDA () 0)))
             (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Parent: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 1
WALK(ING):
  Expression: ((#:NEW195 (LAMBDA () 0)))
  Context: (LET* ((#:NEW195 (LAMBDA () 0)))
             (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Parent: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 1
WALK(ING):
  Expression: (#:NEW195 (LAMBDA () 0))
  Context: ((#:NEW195 (LAMBDA () 0)))
  Parent: (LET* ((#:NEW195 (LAMBDA () 0)))
            (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #:NEW195
  Context: (#:NEW195 (LAMBDA () 0))
  Parent: ((#:NEW195 (LAMBDA () 0)))
  Depth: 3
WALK(ING):
  Expression: (LAMBDA () 0)
  Context: (#:NEW195 (LAMBDA () 0))
  Parent: ((#:NEW195 (LAMBDA () 0)))
  Depth: 3
WALK(ING):
  Expression: #'(LAMBDA () 0)
  Context: (#:NEW195 (LAMBDA () 0))
  Parent: ((#:NEW195 (LAMBDA () 0)))
  Depth: 3
WALK(ING):
  Expression: (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME)
  Context: (LET* ((#:NEW195 (LAMBDA () 0)))
             (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Parent: (SETF (FDEFINITION 'FDEFINITION-FUNCTION-NAME) (LAMBDA () 0))
  Depth: 1
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME)
  Parent: (LET* ((#:NEW195 (LAMBDA () 0)))
            (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #'(SETF FDEFINITION)
  Context: (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME)
  Parent: (LET* ((#:NEW195 (LAMBDA () 0)))
            (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #:NEW195
  Context: (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME)
  Parent: (LET* ((#:NEW195 (LAMBDA () 0)))
            (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: 'FDEFINITION-FUNCTION-NAME
  Context: (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME)
  Parent: (LET* ((#:NEW195 (LAMBDA () 0)))
            (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'FDEFINITION-FUNCTION-NAME
  Parent: (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME)
  Depth: 3
WALK(ING):
  Expression: FDEFINITION-FUNCTION-NAME
  Context: 'FDEFINITION-FUNCTION-NAME
  Parent: (FUNCALL #'(SETF FDEFINITION) #:NEW195 'FDEFINITION-FUNCTION-NAME)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Context: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                 (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
                  '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
               (SB-KERNEL::%DEFSTRUCT
                '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                   #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
                (SB-C:SOURCE-LOCATION))
               (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                 (SB-KERNEL::%COMPILER-DEFSTRUCT
                  '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                  '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                     #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
               (SB-C:XDEFUN COPY-CIRCLE
                   :COPIER
                   NIL
                   (SB-KERNEL:INSTANCE)
                 (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
               (SB-C:XDEFUN CIRCLE-P
                   :PREDICATE
                   NIL
                   (SB-KERNEL::OBJECT)
                 (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
               (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                   :ACCESSOR
                   (RADIUS 1 :TYPE NUMBER)
                   (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                 (LET ((#:INSTANCE #) (#:VAL #))
                   (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                   #:VAL))
               (SB-C:XDEFUN CIRCLE-RADIUS
                   :ACCESSOR
                   (RADIUS 1 :TYPE NUMBER)
                   (SB-KERNEL:INSTANCE)
                 (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                 (SB-KERNEL:%INSTANCE-REF
                                  (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
               (SB-C:XDEFUN MAKE-CIRCLE
                   :CONSTRUCTOR
                   NIL
                   (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                 (DECLARE (SB-INT:EXPLICIT-CHECK)
                          (SB-C::LAMBDA-LIST (&KEY #)))
                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                  #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                  '((:SLOT T . 0))
                  (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
               (SB-KERNEL::%TARGET-DEFSTRUCT
                '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                    (SB-KERNEL::A SB-KERNEL::B)
                  (DECLARE (OPTIMIZE # #)
                           (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                           (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                  (AND (= # #)))
                '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Context: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
                 '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Depth: 3
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
  Context: (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Depth: 3
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
  Context: (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
               (SB-C:SOURCE-LOCATION))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: SB-KERNEL::%DEFSTRUCT
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-KERNEL::%DEFSTRUCT
           '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
           '#(#<SB-KERNEL:LAYOUT for T {20911003}>
              #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
           (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-KERNEL::%COMPILER-DEFSTRUCT
                 '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                 '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                    #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: SB-KERNEL::%COMPILER-DEFSTRUCT
  Context: (SB-KERNEL::%COMPILER-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
  Context: (SB-KERNEL::%COMPILER-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
  Context: (SB-KERNEL::%COMPILER-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: (SB-C:XDEFUN COPY-CIRCLE
                  :COPIER
                  NIL
                  (SB-KERNEL:INSTANCE)
                (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
               (SB-IMPL::%DEFUN 'COPY-CIRCLE
                                (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                    (SB-KERNEL:INSTANCE)
                                  (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                                NIL :COPIER))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
            (SB-IMPL::%DEFUN 'COPY-CIRCLE
                             (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                             NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
            (SB-IMPL::%DEFUN 'COPY-CIRCLE
                             (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                             NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: 'COPY-CIRCLE
  Context: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'COPY-CIRCLE
  Parent: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Depth: 5
WALK(ING):
  Expression: COPY-CIRCLE
  Context: 'COPY-CIRCLE
  Parent: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: :COPIER
  Context: (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                               (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                   (SB-KERNEL:INSTANCE)
                                 (BLOCK COPY-CIRCLE
                                   (COPY-STRUCTURE
                                    (THE CIRCLE SB-KERNEL:INSTANCE))))
                               NIL :COPIER)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
            (SB-IMPL::%DEFUN 'COPY-CIRCLE
                             (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                             NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE
                                (COPY-STRUCTURE
                                 (THE CIRCLE SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: 'COPY-CIRCLE
  Context: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE
                                (COPY-STRUCTURE
                                 (THE CIRCLE SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'COPY-CIRCLE
  Parent: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                           (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                               (SB-KERNEL:INSTANCE)
                             (BLOCK COPY-CIRCLE
                               (COPY-STRUCTURE
                                (THE CIRCLE SB-KERNEL:INSTANCE))))
                           NIL :COPIER)
  Depth: 4
WALK(ING):
  Expression: COPY-CIRCLE
  Context: 'COPY-CIRCLE
  Parent: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                           (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                               (SB-KERNEL:INSTANCE)
                             (BLOCK COPY-CIRCLE
                               (COPY-STRUCTURE
                                (THE CIRCLE SB-KERNEL:INSTANCE))))
                           NIL :COPIER)
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                  (SB-KERNEL:INSTANCE)
                (BLOCK COPY-CIRCLE
                  (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE))))
  Context: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE
                                (COPY-STRUCTURE
                                 (THE CIRCLE SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA COPY-CIRCLE
                    (SB-KERNEL:INSTANCE)
                  (BLOCK COPY-CIRCLE
                    (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE))))
  Context: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE
                                (COPY-STRUCTURE
                                 (THE CIRCLE SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE
                                (COPY-STRUCTURE
                                 (THE CIRCLE SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: :COPIER
  Context: (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE
                                (COPY-STRUCTURE
                                 (THE CIRCLE SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-CIRCLE T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-CIRCLE
                            (SB-INT:NAMED-LAMBDA COPY-CIRCLE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-CIRCLE (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: (SB-C:XDEFUN CIRCLE-P
                  :PREDICATE
                  NIL
                  (SB-KERNEL::OBJECT)
                (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
               (SB-IMPL::%DEFUN 'CIRCLE-P
                                (SB-INT:NAMED-LAMBDA CIRCLE-P
                                    (SB-KERNEL::OBJECT)
                                  (BLOCK CIRCLE-P
                                    (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                                NIL :PREDICATE))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
            (SB-IMPL::%DEFUN 'CIRCLE-P
                             (SB-INT:NAMED-LAMBDA CIRCLE-P
                                 (SB-KERNEL::OBJECT)
                               (BLOCK CIRCLE-P
                                 (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                             NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
            (SB-IMPL::%DEFUN 'CIRCLE-P
                             (SB-INT:NAMED-LAMBDA CIRCLE-P
                                 (SB-KERNEL::OBJECT)
                               (BLOCK CIRCLE-P
                                 (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                             NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: 'CIRCLE-P
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'CIRCLE-P
  Parent: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Depth: 5
WALK(ING):
  Expression: CIRCLE-P
  Context: 'CIRCLE-P
  Parent: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: :PREDICATE
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'CIRCLE-P
                               (SB-INT:NAMED-LAMBDA CIRCLE-P
                                   (SB-KERNEL::OBJECT)
                                 (BLOCK CIRCLE-P
                                   (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                               NIL :PREDICATE)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
            (SB-IMPL::%DEFUN 'CIRCLE-P
                             (SB-INT:NAMED-LAMBDA CIRCLE-P
                                 (SB-KERNEL::OBJECT)
                               (BLOCK CIRCLE-P
                                 (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                             NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: 'CIRCLE-P
  Context: (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'CIRCLE-P
  Parent: (SB-IMPL::%DEFUN 'CIRCLE-P
                           (SB-INT:NAMED-LAMBDA CIRCLE-P
                               (SB-KERNEL::OBJECT)
                             (BLOCK CIRCLE-P
                               (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                           NIL :PREDICATE)
  Depth: 4
WALK(ING):
  Expression: CIRCLE-P
  Context: 'CIRCLE-P
  Parent: (SB-IMPL::%DEFUN 'CIRCLE-P
                           (SB-INT:NAMED-LAMBDA CIRCLE-P
                               (SB-KERNEL::OBJECT)
                             (BLOCK CIRCLE-P
                               (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                           NIL :PREDICATE)
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA CIRCLE-P
                  (SB-KERNEL::OBJECT)
                (BLOCK CIRCLE-P (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
  Context: (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA CIRCLE-P
                    (SB-KERNEL::OBJECT)
                  (BLOCK CIRCLE-P (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
  Context: (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: :PREDICATE
  Context: (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'CIRCLE-P
                            (SB-INT:NAMED-LAMBDA CIRCLE-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK CIRCLE-P
                                (TYPEP SB-KERNEL::OBJECT 'CIRCLE)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                  :ACCESSOR
                  (RADIUS 1 :TYPE NUMBER)
                  (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                (LET ((#:INSTANCE (THE CIRCLE SB-KERNEL:INSTANCE))
                      (#:VAL (SB-KERNEL:THE* # SB-KERNEL::VALUE)))
                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                  #:VAL))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
               (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                       (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                        (SB-INT:NAMED-LAMBDA (SETF #)
                                                            (SB-KERNEL::VALUE
                                                             SB-KERNEL:INSTANCE)
                                                          (BLOCK CIRCLE-RADIUS
                                                            #))
                                                        NIL :ACCESSOR))
               (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                 (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
               '(SETF CIRCLE-RADIUS))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
            '(SETF CIRCLE-RADIUS))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
            '(SETF CIRCLE-RADIUS))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: '(SETF CIRCLE-RADIUS)
  Context: (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                      (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                       (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                                           (SB-KERNEL::VALUE
                                                            SB-KERNEL:INSTANCE)
                                                         (BLOCK CIRCLE-RADIUS
                                                           (LET #
                                                             #
                                                             #:VAL)))
                                                       NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
            '(SETF CIRCLE-RADIUS))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (PROGN
               (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                    (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                                  (BLOCK CIRCLE-RADIUS
                                    (LET #
                                      #
                                      #:VAL)))
                                NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
            '(SETF CIRCLE-RADIUS))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                             (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                 (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                               (BLOCK CIRCLE-RADIUS
                                 (LET #
                                   #
                                   #:VAL)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                               (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                   (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                                 (BLOCK CIRCLE-RADIUS
                                   (LET (# #)
                                     (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0
                                                              #:VAL)
                                     #:VAL)))
                               NIL :ACCESSOR)
  Context: (PROGN
            (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                             (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                 (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                               (BLOCK CIRCLE-RADIUS
                                 (LET #
                                   #
                                   #:VAL)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: '(SETF CIRCLE-RADIUS)
  Context: (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                  (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                (BLOCK CIRCLE-RADIUS
                  (LET ((#:INSTANCE #) (#:VAL #))
                    (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                    #:VAL)))
  Context: (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                    (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                  (BLOCK CIRCLE-RADIUS
                    (LET ((#:INSTANCE #) (#:VAL #))
                      (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                      #:VAL)))
  Context: (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                            (SB-INT:NAMED-LAMBDA (SETF CIRCLE-RADIUS)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
            '(SETF CIRCLE-RADIUS))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Depth: 4
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Depth: 4
WALK(ING):
  Expression: (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
           '(SETF CIRCLE-RADIUS))
  Depth: 3
WALK(ING):
  Expression: SB-C::WARN-IF-SETF-MACRO
  Context: (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Depth: 4
WALK(ING):
  Expression: '(SETF CIRCLE-RADIUS)
  Context: (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
  Depth: 4
WALK(ING):
  Expression: '(SETF CIRCLE-RADIUS)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF CIRCLE-RADIUS) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN '(SETF CIRCLE-RADIUS)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF CIRCLE-RADIUS)))
            '(SETF CIRCLE-RADIUS))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (SB-C:XDEFUN CIRCLE-RADIUS
                  :ACCESSOR
                  (RADIUS 1 :TYPE NUMBER)
                  (SB-KERNEL:INSTANCE)
                (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                (SB-KERNEL:%INSTANCE-REF
                                 (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
               (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                       (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                        (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                            (SB-KERNEL:INSTANCE)
                                                          (BLOCK CIRCLE-RADIUS
                                                            #))
                                                        NIL :ACCESSOR)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                     (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                     (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                    (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                    (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                    (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: 'CIRCLE-RADIUS
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'CIRCLE-RADIUS
  Parent: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: CIRCLE-RADIUS
  Context: 'CIRCLE-RADIUS
  Parent: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                      (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                       (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                           (SB-KERNEL:INSTANCE)
                                                         (BLOCK CIRCLE-RADIUS
                                                           (SB-KERNEL:THE* #
                                                                           #)))
                                                       NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                     (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (PROGN
               (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                    (SB-KERNEL:INSTANCE)
                                  (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                                NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                    (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                     (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK CIRCLE-RADIUS #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                             (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                    (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                               (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                   (SB-KERNEL:INSTANCE)
                                 (BLOCK CIRCLE-RADIUS
                                   (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                                   (SB-KERNEL:%INSTANCE-REF #
                                                                            0))))
                               NIL :ACCESSOR)
  Context: (PROGN
            (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                             (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'CIRCLE-RADIUS T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (RADIUS 1 :TYPE NUMBER)
                                   (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                                                    (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK CIRCLE-RADIUS #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: 'CIRCLE-RADIUS
  Context: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'CIRCLE-RADIUS
  Parent: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                           (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                               (SB-KERNEL:INSTANCE)
                             (BLOCK CIRCLE-RADIUS
                               (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                               (SB-KERNEL:%INSTANCE-REF # 0))))
                           NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: CIRCLE-RADIUS
  Context: 'CIRCLE-RADIUS
  Parent: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                           (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                               (SB-KERNEL:INSTANCE)
                             (BLOCK CIRCLE-RADIUS
                               (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                               (SB-KERNEL:%INSTANCE-REF # 0))))
                           NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                  (SB-KERNEL:INSTANCE)
                (BLOCK CIRCLE-RADIUS
                  (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                  (SB-KERNEL:%INSTANCE-REF
                                   (THE CIRCLE SB-KERNEL:INSTANCE) 0))))
  Context: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                    (SB-KERNEL:INSTANCE)
                  (BLOCK CIRCLE-RADIUS
                    (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                    (SB-KERNEL:%INSTANCE-REF
                                     (THE CIRCLE SB-KERNEL:INSTANCE) 0))))
  Context: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS
                                (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'CIRCLE-RADIUS
                            (SB-INT:NAMED-LAMBDA CIRCLE-RADIUS
                                (SB-KERNEL:INSTANCE)
                              (BLOCK CIRCLE-RADIUS (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:XDEFUN MAKE-CIRCLE
                  :CONSTRUCTOR
                  NIL
                  (&KEY
                   ((:RADIUS #:RADIUS)
                    (SB-KERNEL:THE*
                     (NUMBER :SOURCE-FORM # :CONTEXT # :USE-ANNOTATIONS T) 1)))
                (DECLARE (SB-INT:EXPLICIT-CHECK)
                         (SB-C::LAMBDA-LIST (&KEY (# 1))))
                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                 '((:SLOT T . 0))
                 (SB-KERNEL:THE*
                  (NUMBER :CONTEXT (SB-KERNEL::STRUCT-CONTEXT CIRCLE . RADIUS))
                  #:RADIUS)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
               (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                                (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                    (&KEY (# #))
                                  (DECLARE (SB-INT:EXPLICIT-CHECK)
                                           (SB-C::LAMBDA-LIST #))
                                  (BLOCK MAKE-CIRCLE
                                    (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                     # '# #)))
                                NIL :CONSTRUCTOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
            (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                             (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                 (&KEY (# #))
                               (DECLARE (SB-INT:EXPLICIT-CHECK)
                                        (SB-C::LAMBDA-LIST #))
                               (BLOCK MAKE-CIRCLE
                                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO #
                                                                            '#
                                                                            #)))
                             NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
            (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                             (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                 (&KEY (# #))
                               (DECLARE (SB-INT:EXPLICIT-CHECK)
                                        (SB-C::LAMBDA-LIST #))
                               (BLOCK MAKE-CIRCLE
                                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO #
                                                                            '#
                                                                            #)))
                             NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: 'MAKE-CIRCLE
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'MAKE-CIRCLE
  Parent: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Depth: 5
WALK(ING):
  Expression: MAKE-CIRCLE
  Context: 'MAKE-CIRCLE
  Parent: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: :CONSTRUCTOR
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                               (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                   (&KEY
                                    ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                                 (DECLARE (SB-INT:EXPLICIT-CHECK)
                                          (SB-C::LAMBDA-LIST (&KEY #)))
                                 (BLOCK MAKE-CIRCLE
                                   (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                    #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                    '(#) (SB-KERNEL:THE* # #:RADIUS))))
                               NIL :CONSTRUCTOR)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
            (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                             (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                 (&KEY (# #))
                               (DECLARE (SB-INT:EXPLICIT-CHECK)
                                        (SB-C::LAMBDA-LIST #))
                               (BLOCK MAKE-CIRCLE
                                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO #
                                                                            '#
                                                                            #)))
                             NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                 '(#) (SB-KERNEL:THE* # #:RADIUS))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: 'MAKE-CIRCLE
  Context: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                 '(#) (SB-KERNEL:THE* # #:RADIUS))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'MAKE-CIRCLE
  Parent: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                           (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                             (DECLARE (SB-INT:EXPLICIT-CHECK)
                                      (SB-C::LAMBDA-LIST (&KEY #)))
                             (BLOCK MAKE-CIRCLE
                               (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                '(#) (SB-KERNEL:THE* # #:RADIUS))))
                           NIL :CONSTRUCTOR)
  Depth: 4
WALK(ING):
  Expression: MAKE-CIRCLE
  Context: 'MAKE-CIRCLE
  Parent: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                           (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                             (DECLARE (SB-INT:EXPLICIT-CHECK)
                                      (SB-C::LAMBDA-LIST (&KEY #)))
                             (BLOCK MAKE-CIRCLE
                               (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                '(#) (SB-KERNEL:THE* # #:RADIUS))))
                           NIL :CONSTRUCTOR)
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                  (&KEY
                   ((:RADIUS #:RADIUS)
                    (SB-KERNEL:THE*
                     (NUMBER :SOURCE-FORM # :CONTEXT # :USE-ANNOTATIONS T) 1)))
                (DECLARE (SB-INT:EXPLICIT-CHECK)
                         (SB-C::LAMBDA-LIST (&KEY (# 1))))
                (BLOCK MAKE-CIRCLE
                  (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                   #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                   '((:SLOT T . 0))
                   (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS))))
  Context: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                 '(#) (SB-KERNEL:THE* # #:RADIUS))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                    (&KEY
                     ((:RADIUS #:RADIUS)
                      (SB-KERNEL:THE*
                       (NUMBER :SOURCE-FORM # :CONTEXT # :USE-ANNOTATIONS T)
                       1)))
                  (DECLARE (SB-INT:EXPLICIT-CHECK)
                           (SB-C::LAMBDA-LIST (&KEY (# 1))))
                  (BLOCK MAKE-CIRCLE
                    (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                     #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                     '((:SLOT T . 0))
                     (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS))))
  Context: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                 '(#) (SB-KERNEL:THE* # #:RADIUS))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                 '(#) (SB-KERNEL:THE* # #:RADIUS))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: :CONSTRUCTOR
  Context: (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
                                 '(#) (SB-KERNEL:THE* # #:RADIUS))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-CIRCLE T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-CIRCLE
                            (SB-INT:NAMED-LAMBDA MAKE-CIRCLE
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-CIRCLE
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%TARGET-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                   (SB-KERNEL::A SB-KERNEL::B)
                 (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                          (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                          (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                 (AND
                  (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
               '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-CIRCLE
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN CIRCLE-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
            (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN CIRCLE-RADIUS
                :ACCESSOR
                (RADIUS 1 :TYPE NUMBER)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-CIRCLE
                :CONSTRUCTOR
                NIL
                (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
             (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Parent: (DEFSTRUCT CIRCLE (RADIUS 1 :TYPE NUMBER))
  Depth: 1
WALK(ING):
  Expression: SB-KERNEL::%TARGET-DEFSTRUCT
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                  (SB-KERNEL::A SB-KERNEL::B)
                (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                         (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                         (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                (AND
                 (=
                  (SB-EXT:TRULY-THE NUMBER
                                    (SB-KERNEL:%INSTANCE-REF SB-KERNEL::A 0))
                  (SB-EXT:TRULY-THE NUMBER
                                    (SB-KERNEL:%INSTANCE-REF SB-KERNEL::B 0)))))
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                    (SB-KERNEL::A SB-KERNEL::B)
                  (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                           (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                           (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                  (AND
                   (=
                    (SB-EXT:TRULY-THE NUMBER
                                      (SB-KERNEL:%INSTANCE-REF SB-KERNEL::A 0))
                    (SB-EXT:TRULY-THE NUMBER
                                      (SB-KERNEL:%INSTANCE-REF SB-KERNEL::B
                                                               0)))))
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: '(SETF CIRCLE-RADIUS)
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: 'CIRCLE-RADIUS
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-CIRCLE
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE CIRCLE SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN CIRCLE-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'CIRCLE))
           (SB-C:XDEFUN (SETF CIRCLE-RADIUS)
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN CIRCLE-RADIUS
               :ACCESSOR
               (RADIUS 1 :TYPE NUMBER)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (NUMBER :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE CIRCLE SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-CIRCLE
               :CONSTRUCTOR
               NIL
               (&KEY ((:RADIUS #:RADIUS) (SB-KERNEL:THE* # 1)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (NUMBER :CONTEXT #) #:RADIUS)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
            (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'CIRCLE-RADIUS
  Parent: (SB-KERNEL::%TARGET-DEFSTRUCT
           '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
           (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
               (SB-KERNEL::A SB-KERNEL::B)
             (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                      (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                      (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
             (AND (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
           '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Depth: 3
WALK(ING):
  Expression: CIRCLE-RADIUS
  Context: 'CIRCLE-RADIUS
  Parent: (SB-KERNEL::%TARGET-DEFSTRUCT
           '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION CIRCLE {1103C1F4B3}>
           (SB-INT:NAMED-LAMBDA "CIRCLE-EQUALP"
               (SB-KERNEL::A SB-KERNEL::B)
             (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                      (TYPE CIRCLE SB-KERNEL::A SB-KERNEL::B)
                      (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
             (AND (= (SB-EXT:TRULY-THE NUMBER #) (SB-EXT:TRULY-THE NUMBER #))))
           '(SETF CIRCLE-RADIUS) 'CIRCLE-RADIUS)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Context: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                 (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
                  '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
               (SB-KERNEL::%DEFSTRUCT
                '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                   #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
                (SB-C:SOURCE-LOCATION))
               (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                 (SB-KERNEL::%COMPILER-DEFSTRUCT
                  '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                  '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                     #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
               (SB-C:XDEFUN COPY-PERSON
                   :COPIER
                   NIL
                   (SB-KERNEL:INSTANCE)
                 (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
               (SB-C:XDEFUN PERSON-P
                   :PREDICATE
                   NIL
                   (SB-KERNEL::OBJECT)
                 (TYPEP SB-KERNEL::OBJECT 'PERSON))
               (SB-C:XDEFUN (SETF PERSON.AGE)
                   :ACCESSOR
                   (AGE 0 :TYPE FIXNUM)
                   (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                 (LET ((#:INSTANCE #) (#:VAL #))
                   (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                   #:VAL))
               (SB-C:XDEFUN PERSON.AGE
                   :ACCESSOR
                   (AGE 0 :TYPE FIXNUM)
                   (SB-KERNEL:INSTANCE)
                 (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                 (SB-KERNEL:%INSTANCE-REF
                                  (THE PERSON SB-KERNEL:INSTANCE) 0)))
               (SB-C:XDEFUN MAKE-PERSON
                   :CONSTRUCTOR
                   NIL
                   (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                 (DECLARE (SB-INT:EXPLICIT-CHECK)
                          (SB-C::LAMBDA-LIST (&KEY #)))
                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                  #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                  '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
               (SB-KERNEL::%TARGET-DEFSTRUCT
                '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                    (SB-KERNEL::A SB-KERNEL::B)
                  (DECLARE (OPTIMIZE # #)
                           (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                           (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                  (AND (= # #)))
                '(SETF PERSON.AGE) 'PERSON.AGE))
  Context: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
                 '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Depth: 3
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
  Context: (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Depth: 3
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
  Context: (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
               (SB-C:SOURCE-LOCATION))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: SB-KERNEL::%DEFSTRUCT
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-KERNEL::%DEFSTRUCT
           '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
           '#(#<SB-KERNEL:LAYOUT for T {20911003}>
              #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
           (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-KERNEL::%COMPILER-DEFSTRUCT
                 '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                 '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                    #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: SB-KERNEL::%COMPILER-DEFSTRUCT
  Context: (SB-KERNEL::%COMPILER-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
  Context: (SB-KERNEL::%COMPILER-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
  Context: (SB-KERNEL::%COMPILER-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-KERNEL::%COMPILER-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
  Depth: 3
WALK(ING):
  Expression: (SB-C:XDEFUN COPY-PERSON
                  :COPIER
                  NIL
                  (SB-KERNEL:INSTANCE)
                (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
               (SB-IMPL::%DEFUN 'COPY-PERSON
                                (SB-INT:NAMED-LAMBDA COPY-PERSON
                                    (SB-KERNEL:INSTANCE)
                                  (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                                NIL :COPIER))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
            (SB-IMPL::%DEFUN 'COPY-PERSON
                             (SB-INT:NAMED-LAMBDA COPY-PERSON
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                             NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
            (SB-IMPL::%DEFUN 'COPY-PERSON
                             (SB-INT:NAMED-LAMBDA COPY-PERSON
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                             NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: 'COPY-PERSON
  Context: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'COPY-PERSON
  Parent: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Depth: 5
WALK(ING):
  Expression: COPY-PERSON
  Context: 'COPY-PERSON
  Parent: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: :COPIER
  Context: (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'COPY-PERSON
                               (SB-INT:NAMED-LAMBDA COPY-PERSON
                                   (SB-KERNEL:INSTANCE)
                                 (BLOCK COPY-PERSON
                                   (COPY-STRUCTURE
                                    (THE PERSON SB-KERNEL:INSTANCE))))
                               NIL :COPIER)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
            (SB-IMPL::%DEFUN 'COPY-PERSON
                             (SB-INT:NAMED-LAMBDA COPY-PERSON
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                             NIL :COPIER))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON
                                (COPY-STRUCTURE
                                 (THE PERSON SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: 'COPY-PERSON
  Context: (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON
                                (COPY-STRUCTURE
                                 (THE PERSON SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'COPY-PERSON
  Parent: (SB-IMPL::%DEFUN 'COPY-PERSON
                           (SB-INT:NAMED-LAMBDA COPY-PERSON
                               (SB-KERNEL:INSTANCE)
                             (BLOCK COPY-PERSON
                               (COPY-STRUCTURE
                                (THE PERSON SB-KERNEL:INSTANCE))))
                           NIL :COPIER)
  Depth: 4
WALK(ING):
  Expression: COPY-PERSON
  Context: 'COPY-PERSON
  Parent: (SB-IMPL::%DEFUN 'COPY-PERSON
                           (SB-INT:NAMED-LAMBDA COPY-PERSON
                               (SB-KERNEL:INSTANCE)
                             (BLOCK COPY-PERSON
                               (COPY-STRUCTURE
                                (THE PERSON SB-KERNEL:INSTANCE))))
                           NIL :COPIER)
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA COPY-PERSON
                  (SB-KERNEL:INSTANCE)
                (BLOCK COPY-PERSON
                  (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE))))
  Context: (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON
                                (COPY-STRUCTURE
                                 (THE PERSON SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA COPY-PERSON
                    (SB-KERNEL:INSTANCE)
                  (BLOCK COPY-PERSON
                    (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE))))
  Context: (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON
                                (COPY-STRUCTURE
                                 (THE PERSON SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON
                                (COPY-STRUCTURE
                                 (THE PERSON SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: :COPIER
  Context: (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON
                                (COPY-STRUCTURE
                                 (THE PERSON SB-KERNEL:INSTANCE))))
                            NIL :COPIER)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'COPY-PERSON T NIL :COPIER))
           (SB-IMPL::%DEFUN 'COPY-PERSON
                            (SB-INT:NAMED-LAMBDA COPY-PERSON
                                (SB-KERNEL:INSTANCE)
                              (BLOCK COPY-PERSON (COPY-STRUCTURE #)))
                            NIL :COPIER))
  Depth: 3
WALK(ING):
  Expression: (SB-C:XDEFUN PERSON-P
                  :PREDICATE
                  NIL
                  (SB-KERNEL::OBJECT)
                (TYPEP SB-KERNEL::OBJECT 'PERSON))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
               (SB-IMPL::%DEFUN 'PERSON-P
                                (SB-INT:NAMED-LAMBDA PERSON-P
                                    (SB-KERNEL::OBJECT)
                                  (BLOCK PERSON-P
                                    (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                                NIL :PREDICATE))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
            (SB-IMPL::%DEFUN 'PERSON-P
                             (SB-INT:NAMED-LAMBDA PERSON-P
                                 (SB-KERNEL::OBJECT)
                               (BLOCK PERSON-P
                                 (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                             NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
            (SB-IMPL::%DEFUN 'PERSON-P
                             (SB-INT:NAMED-LAMBDA PERSON-P
                                 (SB-KERNEL::OBJECT)
                               (BLOCK PERSON-P
                                 (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                             NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: 'PERSON-P
  Context: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'PERSON-P
  Parent: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Depth: 5
WALK(ING):
  Expression: PERSON-P
  Context: 'PERSON-P
  Parent: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: :PREDICATE
  Context: (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'PERSON-P
                               (SB-INT:NAMED-LAMBDA PERSON-P
                                   (SB-KERNEL::OBJECT)
                                 (BLOCK PERSON-P
                                   (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                               NIL :PREDICATE)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
            (SB-IMPL::%DEFUN 'PERSON-P
                             (SB-INT:NAMED-LAMBDA PERSON-P
                                 (SB-KERNEL::OBJECT)
                               (BLOCK PERSON-P
                                 (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                             NIL :PREDICATE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: 'PERSON-P
  Context: (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PERSON-P
  Parent: (SB-IMPL::%DEFUN 'PERSON-P
                           (SB-INT:NAMED-LAMBDA PERSON-P
                               (SB-KERNEL::OBJECT)
                             (BLOCK PERSON-P
                               (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                           NIL :PREDICATE)
  Depth: 4
WALK(ING):
  Expression: PERSON-P
  Context: 'PERSON-P
  Parent: (SB-IMPL::%DEFUN 'PERSON-P
                           (SB-INT:NAMED-LAMBDA PERSON-P
                               (SB-KERNEL::OBJECT)
                             (BLOCK PERSON-P
                               (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                           NIL :PREDICATE)
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA PERSON-P
                  (SB-KERNEL::OBJECT)
                (BLOCK PERSON-P (TYPEP SB-KERNEL::OBJECT 'PERSON)))
  Context: (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA PERSON-P
                    (SB-KERNEL::OBJECT)
                  (BLOCK PERSON-P (TYPEP SB-KERNEL::OBJECT 'PERSON)))
  Context: (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: :PREDICATE
  Context: (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON-P T NIL :PREDICATE))
           (SB-IMPL::%DEFUN 'PERSON-P
                            (SB-INT:NAMED-LAMBDA PERSON-P
                                (SB-KERNEL::OBJECT)
                              (BLOCK PERSON-P
                                (TYPEP SB-KERNEL::OBJECT 'PERSON)))
                            NIL :PREDICATE))
  Depth: 3
WALK(ING):
  Expression: (SB-C:XDEFUN (SETF PERSON.AGE)
                  :ACCESSOR
                  (AGE 0 :TYPE FIXNUM)
                  (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                (LET ((#:INSTANCE (THE PERSON SB-KERNEL:INSTANCE))
                      (#:VAL (SB-KERNEL:THE* # SB-KERNEL::VALUE)))
                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                  #:VAL))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
               (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                       (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                        (SB-INT:NAMED-LAMBDA (SETF #)
                                                            (SB-KERNEL::VALUE
                                                             SB-KERNEL:INSTANCE)
                                                          (BLOCK PERSON.AGE #))
                                                        NIL :ACCESSOR))
               (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                 (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
               '(SETF PERSON.AGE))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
            '(SETF PERSON.AGE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
            '(SETF PERSON.AGE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: '(SETF PERSON.AGE)
  Context: (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                      (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                       (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                                           (SB-KERNEL::VALUE
                                                            SB-KERNEL:INSTANCE)
                                                         (BLOCK PERSON.AGE
                                                           (LET #
                                                             #
                                                             #:VAL)))
                                                       NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
            '(SETF PERSON.AGE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (PROGN
               (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                    (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                                  (BLOCK PERSON.AGE
                                    (LET #
                                      #
                                      #:VAL)))
                                NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
            '(SETF PERSON.AGE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                             (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                 (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                               (BLOCK PERSON.AGE
                                 (LET #
                                   #
                                   #:VAL)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                               (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                   (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                                 (BLOCK PERSON.AGE
                                   (LET (# #)
                                     (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0
                                                              #:VAL)
                                     #:VAL)))
                               NIL :ACCESSOR)
  Context: (PROGN
            (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                             (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                 (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                               (BLOCK PERSON.AGE
                                 (LET #
                                   #
                                   #:VAL)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: '(SETF PERSON.AGE)
  Context: (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                  (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                (BLOCK PERSON.AGE
                  (LET ((#:INSTANCE #) (#:VAL #))
                    (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                    #:VAL)))
  Context: (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                    (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                  (BLOCK PERSON.AGE
                    (LET ((#:INSTANCE #) (#:VAL #))
                      (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                      #:VAL)))
  Context: (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET (# #)
                                  (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                                  #:VAL)))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                            (SB-INT:NAMED-LAMBDA (SETF PERSON.AGE)
                                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (LET #
                                  #
                                  #:VAL)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
            '(SETF PERSON.AGE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Depth: 4
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Depth: 4
WALK(ING):
  Expression: (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                    (SB-INT:NAMED-LAMBDA (SETF #)
                                                        (SB-KERNEL::VALUE
                                                         SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
           '(SETF PERSON.AGE))
  Depth: 3
WALK(ING):
  Expression: SB-C::WARN-IF-SETF-MACRO
  Context: (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Depth: 4
WALK(ING):
  Expression: '(SETF PERSON.AGE)
  Context: (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
  Depth: 4
WALK(ING):
  Expression: '(SETF PERSON.AGE)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN '(SETF PERSON.AGE) T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN '(SETF PERSON.AGE)
                                                     (SB-INT:NAMED-LAMBDA (SETF #)
                                                         (SB-KERNEL::VALUE
                                                          SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-C::WARN-IF-SETF-MACRO '(SETF PERSON.AGE)))
            '(SETF PERSON.AGE))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (SB-C:XDEFUN PERSON.AGE
                  :ACCESSOR
                  (AGE 0 :TYPE FIXNUM)
                  (SB-KERNEL:INSTANCE)
                (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                (SB-KERNEL:%INSTANCE-REF
                                 (THE PERSON SB-KERNEL:INSTANCE) 0)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
               (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                       (SB-IMPL::%DEFUN 'PERSON.AGE
                                                        (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                            (SB-KERNEL:INSTANCE)
                                                          (BLOCK PERSON.AGE #))
                                                        NIL :ACCESSOR)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN 'PERSON.AGE
                                                     (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN 'PERSON.AGE
                                                     (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN 'PERSON.AGE
                                                    (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN 'PERSON.AGE
                                                    (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN 'PERSON.AGE
                                                    (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: 'PERSON.AGE
  Context: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'PERSON.AGE
  Parent: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: PERSON.AGE
  Context: 'PERSON.AGE
  Parent: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                      (SB-IMPL::%DEFUN 'PERSON.AGE
                                                       (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                           (SB-KERNEL:INSTANCE)
                                                         (BLOCK PERSON.AGE
                                                           (SB-KERNEL:THE* #
                                                                           #)))
                                                       NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN 'PERSON.AGE
                                                     (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (PROGN
               (SB-IMPL::%DEFUN 'PERSON.AGE
                                (SB-INT:NAMED-LAMBDA PERSON.AGE
                                    (SB-KERNEL:INSTANCE)
                                  (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                                NIL :ACCESSOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
            (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                    (SB-IMPL::%DEFUN 'PERSON.AGE
                                                     (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                         (SB-KERNEL:INSTANCE)
                                                       (BLOCK PERSON.AGE #))
                                                     NIL :ACCESSOR)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (SB-IMPL::%DEFUN 'PERSON.AGE
                             (SB-INT:NAMED-LAMBDA PERSON.AGE
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN 'PERSON.AGE
                                                    (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'PERSON.AGE
                               (SB-INT:NAMED-LAMBDA PERSON.AGE
                                   (SB-KERNEL:INSTANCE)
                                 (BLOCK PERSON.AGE
                                   (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                                   (SB-KERNEL:%INSTANCE-REF #
                                                                            0))))
                               NIL :ACCESSOR)
  Context: (PROGN
            (SB-IMPL::%DEFUN 'PERSON.AGE
                             (SB-INT:NAMED-LAMBDA PERSON.AGE
                                 (SB-KERNEL:INSTANCE)
                               (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                             NIL :ACCESSOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'PERSON.AGE T NIL :ACCESSOR))
           (SB-C::WITH-SOURCE-FORM (AGE 0 :TYPE FIXNUM)
                                   (SB-IMPL::%DEFUN 'PERSON.AGE
                                                    (SB-INT:NAMED-LAMBDA PERSON.AGE
                                                        (SB-KERNEL:INSTANCE)
                                                      (BLOCK PERSON.AGE #))
                                                    NIL :ACCESSOR)))
  Depth: 3
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: 'PERSON.AGE
  Context: (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'PERSON.AGE
  Parent: (SB-IMPL::%DEFUN 'PERSON.AGE
                           (SB-INT:NAMED-LAMBDA PERSON.AGE
                               (SB-KERNEL:INSTANCE)
                             (BLOCK PERSON.AGE
                               (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                               (SB-KERNEL:%INSTANCE-REF # 0))))
                           NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: PERSON.AGE
  Context: 'PERSON.AGE
  Parent: (SB-IMPL::%DEFUN 'PERSON.AGE
                           (SB-INT:NAMED-LAMBDA PERSON.AGE
                               (SB-KERNEL:INSTANCE)
                             (BLOCK PERSON.AGE
                               (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                               (SB-KERNEL:%INSTANCE-REF # 0))))
                           NIL :ACCESSOR)
  Depth: 5
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA PERSON.AGE
                  (SB-KERNEL:INSTANCE)
                (BLOCK PERSON.AGE
                  (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                  (SB-KERNEL:%INSTANCE-REF
                                   (THE PERSON SB-KERNEL:INSTANCE) 0))))
  Context: (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA PERSON.AGE
                    (SB-KERNEL:INSTANCE)
                  (BLOCK PERSON.AGE
                    (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                    (SB-KERNEL:%INSTANCE-REF
                                     (THE PERSON SB-KERNEL:INSTANCE) 0))))
  Context: (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: :ACCESSOR
  Context: (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE
                                (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                                                (SB-KERNEL:%INSTANCE-REF #
                                                                         0))))
                            NIL :ACCESSOR)
  Parent: (PROGN
           (SB-IMPL::%DEFUN 'PERSON.AGE
                            (SB-INT:NAMED-LAMBDA PERSON.AGE
                                (SB-KERNEL:INSTANCE)
                              (BLOCK PERSON.AGE (SB-KERNEL:THE* # #)))
                            NIL :ACCESSOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:XDEFUN MAKE-PERSON
                  :CONSTRUCTOR
                  NIL
                  (&KEY
                   ((:AGE #:AGE)
                    (SB-KERNEL:THE*
                     (FIXNUM :SOURCE-FORM # :CONTEXT # :USE-ANNOTATIONS T) 0)))
                (DECLARE (SB-INT:EXPLICIT-CHECK)
                         (SB-C::LAMBDA-LIST (&KEY (# 0))))
                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                 '((:SLOT T . 0))
                 (SB-KERNEL:THE*
                  (FIXNUM :CONTEXT (SB-KERNEL::STRUCT-CONTEXT PERSON . AGE))
                  #:AGE)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
               (SB-IMPL::%DEFUN 'MAKE-PERSON
                                (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                    (&KEY (# #))
                                  (DECLARE (SB-INT:EXPLICIT-CHECK)
                                           (SB-C::LAMBDA-LIST #))
                                  (BLOCK MAKE-PERSON
                                    (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                     # '# #)))
                                NIL :CONSTRUCTOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
            (SB-IMPL::%DEFUN 'MAKE-PERSON
                             (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                 (&KEY (# #))
                               (DECLARE (SB-INT:EXPLICIT-CHECK)
                                        (SB-C::LAMBDA-LIST #))
                               (BLOCK MAKE-PERSON
                                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO #
                                                                            '#
                                                                            #)))
                             NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
            (SB-IMPL::%DEFUN 'MAKE-PERSON
                             (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                 (&KEY (# #))
                               (DECLARE (SB-INT:EXPLICIT-CHECK)
                                        (SB-C::LAMBDA-LIST #))
                               (BLOCK MAKE-PERSON
                                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO #
                                                                            '#
                                                                            #)))
                             NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: 'MAKE-PERSON
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: QUOTE
  Context: 'MAKE-PERSON
  Parent: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Depth: 5
WALK(ING):
  Expression: MAKE-PERSON
  Context: 'MAKE-PERSON
  Parent: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Depth: 5
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: :CONSTRUCTOR
  Context: (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
  Depth: 4
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'MAKE-PERSON
                               (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                   (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                                 (DECLARE (SB-INT:EXPLICIT-CHECK)
                                          (SB-C::LAMBDA-LIST (&KEY #)))
                                 (BLOCK MAKE-PERSON
                                   (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                    #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                    '(#) (SB-KERNEL:THE* # #:AGE))))
                               NIL :CONSTRUCTOR)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
            (SB-IMPL::%DEFUN 'MAKE-PERSON
                             (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                 (&KEY (# #))
                               (DECLARE (SB-INT:EXPLICIT-CHECK)
                                        (SB-C::LAMBDA-LIST #))
                               (BLOCK MAKE-PERSON
                                 (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO #
                                                                            '#
                                                                            #)))
                             NIL :CONSTRUCTOR))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                 '(#) (SB-KERNEL:THE* # #:AGE))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: 'MAKE-PERSON
  Context: (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                 '(#) (SB-KERNEL:THE* # #:AGE))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'MAKE-PERSON
  Parent: (SB-IMPL::%DEFUN 'MAKE-PERSON
                           (SB-INT:NAMED-LAMBDA MAKE-PERSON
                               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                             (DECLARE (SB-INT:EXPLICIT-CHECK)
                                      (SB-C::LAMBDA-LIST (&KEY #)))
                             (BLOCK MAKE-PERSON
                               (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                '(#) (SB-KERNEL:THE* # #:AGE))))
                           NIL :CONSTRUCTOR)
  Depth: 4
WALK(ING):
  Expression: MAKE-PERSON
  Context: 'MAKE-PERSON
  Parent: (SB-IMPL::%DEFUN 'MAKE-PERSON
                           (SB-INT:NAMED-LAMBDA MAKE-PERSON
                               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                             (DECLARE (SB-INT:EXPLICIT-CHECK)
                                      (SB-C::LAMBDA-LIST (&KEY #)))
                             (BLOCK MAKE-PERSON
                               (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                '(#) (SB-KERNEL:THE* # #:AGE))))
                           NIL :CONSTRUCTOR)
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA MAKE-PERSON
                  (&KEY
                   ((:AGE #:AGE)
                    (SB-KERNEL:THE*
                     (FIXNUM :SOURCE-FORM # :CONTEXT # :USE-ANNOTATIONS T) 0)))
                (DECLARE (SB-INT:EXPLICIT-CHECK)
                         (SB-C::LAMBDA-LIST (&KEY (# 0))))
                (BLOCK MAKE-PERSON
                  (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                   #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                   '((:SLOT T . 0))
                   (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE))))
  Context: (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                 '(#) (SB-KERNEL:THE* # #:AGE))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA MAKE-PERSON
                    (&KEY
                     ((:AGE #:AGE)
                      (SB-KERNEL:THE*
                       (FIXNUM :SOURCE-FORM # :CONTEXT # :USE-ANNOTATIONS T)
                       0)))
                  (DECLARE (SB-INT:EXPLICIT-CHECK)
                           (SB-C::LAMBDA-LIST (&KEY (# 0))))
                  (BLOCK MAKE-PERSON
                    (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                     #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                     '((:SLOT T . 0))
                     (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE))))
  Context: (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                 '(#) (SB-KERNEL:THE* # #:AGE))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                 '(#) (SB-KERNEL:THE* # #:AGE))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: :CONSTRUCTOR
  Context: (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST (&KEY #)))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
                                 #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
                                 '(#) (SB-KERNEL:THE* # #:AGE))))
                            NIL :CONSTRUCTOR)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MAKE-PERSON T NIL :CONSTRUCTOR))
           (SB-IMPL::%DEFUN 'MAKE-PERSON
                            (SB-INT:NAMED-LAMBDA MAKE-PERSON
                                (&KEY (# #))
                              (DECLARE (SB-INT:EXPLICIT-CHECK)
                                       (SB-C::LAMBDA-LIST #))
                              (BLOCK MAKE-PERSON
                                (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO # '#
                                                                           #)))
                            NIL :CONSTRUCTOR))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%TARGET-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                   (SB-KERNEL::A SB-KERNEL::B)
                 (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                          (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                          (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                 (AND
                  (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
               '(SETF PERSON.AGE) 'PERSON.AGE)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
            (SB-KERNEL::%DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
             (SB-C:SOURCE-LOCATION))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-KERNEL::%COMPILER-DEFSTRUCT
               '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                  #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
            (SB-C:XDEFUN COPY-PERSON
                :COPIER
                NIL
                (SB-KERNEL:INSTANCE)
              (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
            (SB-C:XDEFUN PERSON-P
                :PREDICATE
                NIL
                (SB-KERNEL::OBJECT)
              (TYPEP SB-KERNEL::OBJECT 'PERSON))
            (SB-C:XDEFUN (SETF PERSON.AGE)
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
              (LET ((#:INSTANCE #) (#:VAL #))
                (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
                #:VAL))
            (SB-C:XDEFUN PERSON.AGE
                :ACCESSOR
                (AGE 0 :TYPE FIXNUM)
                (SB-KERNEL:INSTANCE)
              (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                              (SB-KERNEL:%INSTANCE-REF
                               (THE PERSON SB-KERNEL:INSTANCE) 0)))
            (SB-C:XDEFUN MAKE-PERSON
                :CONSTRUCTOR
                NIL
                (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
              (DECLARE (SB-INT:EXPLICIT-CHECK)
                       (SB-C::LAMBDA-LIST (&KEY #)))
              (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
               #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
               '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
            (SB-KERNEL::%TARGET-DEFSTRUCT
             '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
             (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                 (SB-KERNEL::A SB-KERNEL::B)
               (DECLARE (OPTIMIZE # #)
                        (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                        (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
               (AND (= # #)))
             '(SETF PERSON.AGE) 'PERSON.AGE))
  Parent: (DEFSTRUCT (PERSON (:CONC-NAME PERSON.)) (AGE 0 :TYPE FIXNUM))
  Depth: 1
WALK(ING):
  Expression: SB-KERNEL::%TARGET-DEFSTRUCT
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
            '(SETF PERSON.AGE) 'PERSON.AGE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
            '(SETF PERSON.AGE) 'PERSON.AGE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                  (SB-KERNEL::A SB-KERNEL::B)
                (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                         (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                         (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                (AND
                 (=
                  (SB-EXT:TRULY-THE FIXNUM
                                    (SB-KERNEL:%INSTANCE-REF SB-KERNEL::A 0))
                  (SB-EXT:TRULY-THE FIXNUM
                                    (SB-KERNEL:%INSTANCE-REF SB-KERNEL::B 0)))))
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
            '(SETF PERSON.AGE) 'PERSON.AGE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                    (SB-KERNEL::A SB-KERNEL::B)
                  (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                           (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                           (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
                  (AND
                   (=
                    (SB-EXT:TRULY-THE FIXNUM
                                      (SB-KERNEL:%INSTANCE-REF SB-KERNEL::A 0))
                    (SB-EXT:TRULY-THE FIXNUM
                                      (SB-KERNEL:%INSTANCE-REF SB-KERNEL::B
                                                               0)))))
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
            '(SETF PERSON.AGE) 'PERSON.AGE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: '(SETF PERSON.AGE)
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
            '(SETF PERSON.AGE) 'PERSON.AGE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: 'PERSON.AGE
  Context: (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND
               (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
            '(SETF PERSON.AGE) 'PERSON.AGE)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%DEFSTRUCT-PACKAGE-LOCKS
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>))
           (SB-KERNEL::%DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            '#(#<SB-KERNEL:LAYOUT for T {20911003}>
               #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)
            (SB-C:SOURCE-LOCATION))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-KERNEL::%COMPILER-DEFSTRUCT
              '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '#(#<SB-KERNEL:LAYOUT for T {20911003}>
                 #<SB-KERNEL:LAYOUT (ID=1) for STRUCTURE-OBJECT {20911073}>)))
           (SB-C:XDEFUN COPY-PERSON
               :COPIER
               NIL
               (SB-KERNEL:INSTANCE)
             (COPY-STRUCTURE (THE PERSON SB-KERNEL:INSTANCE)))
           (SB-C:XDEFUN PERSON-P
               :PREDICATE
               NIL
               (SB-KERNEL::OBJECT)
             (TYPEP SB-KERNEL::OBJECT 'PERSON))
           (SB-C:XDEFUN (SETF PERSON.AGE)
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL::VALUE SB-KERNEL:INSTANCE)
             (LET ((#:INSTANCE #) (#:VAL #))
               (SB-KERNEL:%INSTANCE-SET #:INSTANCE 0 #:VAL)
               #:VAL))
           (SB-C:XDEFUN PERSON.AGE
               :ACCESSOR
               (AGE 0 :TYPE FIXNUM)
               (SB-KERNEL:INSTANCE)
             (SB-KERNEL:THE* (FIXNUM :DERIVE-TYPE-ONLY T)
                             (SB-KERNEL:%INSTANCE-REF
                              (THE PERSON SB-KERNEL:INSTANCE) 0)))
           (SB-C:XDEFUN MAKE-PERSON
               :CONSTRUCTOR
               NIL
               (&KEY ((:AGE #:AGE) (SB-KERNEL:THE* # 0)))
             (DECLARE (SB-INT:EXPLICIT-CHECK)
                      (SB-C::LAMBDA-LIST (&KEY #)))
             (SB-KERNEL::%MAKE-STRUCTURE-INSTANCE-MACRO
              #<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
              '((:SLOT T . 0)) (SB-KERNEL:THE* (FIXNUM :CONTEXT #) #:AGE)))
           (SB-KERNEL::%TARGET-DEFSTRUCT
            '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
            (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
                (SB-KERNEL::A SB-KERNEL::B)
              (DECLARE (OPTIMIZE # #)
                       (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                       (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
              (AND (= # #)))
            '(SETF PERSON.AGE) 'PERSON.AGE))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'PERSON.AGE
  Parent: (SB-KERNEL::%TARGET-DEFSTRUCT
           '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
           (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
               (SB-KERNEL::A SB-KERNEL::B)
             (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                      (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                      (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
             (AND (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
           '(SETF PERSON.AGE) 'PERSON.AGE)
  Depth: 3
WALK(ING):
  Expression: PERSON.AGE
  Context: 'PERSON.AGE
  Parent: (SB-KERNEL::%TARGET-DEFSTRUCT
           '#<SB-KERNEL:DEFSTRUCT-DESCRIPTION PERSON {1103C1FD63}>
           (SB-INT:NAMED-LAMBDA "PERSON-EQUALP"
               (SB-KERNEL::A SB-KERNEL::B)
             (DECLARE (OPTIMIZE (SB-C:STORE-SOURCE-FORM 0) (SAFETY 0))
                      (TYPE PERSON SB-KERNEL::A SB-KERNEL::B)
                      (IGNORABLE SB-KERNEL::A SB-KERNEL::B))
             (AND (= (SB-EXT:TRULY-THE FIXNUM #) (SB-EXT:TRULY-THE FIXNUM #))))
           '(SETF PERSON.AGE) 'PERSON.AGE)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFGENERIC COMPUTE-AREA
                  (SHAPE)
                (:DOCUMENTATION
                 "Compute the area of different geometric shapes"))
  Context: (DEFGENERIC COMPUTE-AREA
               (SHAPE)
             (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Parent: (DEFGENERIC COMPUTE-AREA
              (SHAPE)
            (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                 (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
               (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                        (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                        '"Compute the area of different geometric shapes")
               (FDEFINITION 'COMPUTE-AREA))
  Context: (DEFGENERIC COMPUTE-AREA
               (SHAPE)
             (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Parent: (DEFGENERIC COMPUTE-AREA
              (SHAPE)
            (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Compute the area of different geometric shapes")
            (FDEFINITION 'COMPUTE-AREA))
  Parent: (DEFGENERIC COMPUTE-AREA
              (SHAPE)
            (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Compute the area of different geometric shapes")
            (FDEFINITION 'COMPUTE-AREA))
  Parent: (DEFGENERIC COMPUTE-AREA
              (SHAPE)
            (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::COMPILE-OR-LOAD-DEFGENERIC
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: 'COMPUTE-AREA
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Depth: 4
WALK(ING):
  Expression: COMPUTE-AREA
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Depth: 4
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                       (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                       '"Compute the area of different geometric shapes")
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Compute the area of different geometric shapes")
            (FDEFINITION 'COMPUTE-AREA))
  Parent: (DEFGENERIC COMPUTE-AREA
              (SHAPE)
            (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Depth: 1
WALK(ING):
  Expression: SB-PCL::LOAD-DEFGENERIC
  Context: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: 'COMPUTE-AREA
  Context: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                   (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                   '"Compute the area of different geometric shapes")
  Depth: 3
WALK(ING):
  Expression: COMPUTE-AREA
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                   (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                   '"Compute the area of different geometric shapes")
  Depth: 3
WALK(ING):
  Expression: '(SHAPE)
  Context: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                   (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                   '"Compute the area of different geometric shapes")
  Depth: 3
WALK(ING):
  Expression: :DOCUMENTATION
  Context: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: '"Compute the area of different geometric shapes"
  Context: (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: (FDEFINITION 'COMPUTE-AREA)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Compute the area of different geometric shapes")
            (FDEFINITION 'COMPUTE-AREA))
  Parent: (DEFGENERIC COMPUTE-AREA
              (SHAPE)
            (:DOCUMENTATION "Compute the area of different geometric shapes"))
  Depth: 1
WALK(ING):
  Expression: FDEFINITION
  Context: (FDEFINITION 'COMPUTE-AREA)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: 'COMPUTE-AREA
  Context: (FDEFINITION 'COMPUTE-AREA)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (SB-PCL::LOAD-DEFGENERIC 'COMPUTE-AREA '(SHAPE)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Compute the area of different geometric shapes")
           (FDEFINITION 'COMPUTE-AREA))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'COMPUTE-AREA
  Parent: (FDEFINITION 'COMPUTE-AREA)
  Depth: 3
WALK(ING):
  Expression: COMPUTE-AREA
  Context: 'COMPUTE-AREA
  Parent: (FDEFINITION 'COMPUTE-AREA)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
                (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Context: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
             (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Parent: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
            (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                 (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
               (EVAL-WHEN (:LOAD-TOPLEVEL)
                 (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                              ((* PI #))))
               (EVAL-WHEN (:EXECUTE)
                 (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                              ((* PI #)))))
  Context: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
             (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Parent: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
            (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #)))))
  Parent: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
            (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #)))))
  Parent: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
            (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::COMPILE-OR-LOAD-DEFGENERIC
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: 'COMPUTE-AREA
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Depth: 4
WALK(ING):
  Expression: COMPUTE-AREA
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA)
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:LOAD-TOPLEVEL)
                (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                             ((* PI (EXPT # 2)))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #)))))
  Parent: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
            (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: (:LOAD-TOPLEVEL)
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:LOAD-TOPLEVEL)
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI
                                               (EXPT (CIRCLE-RADIUS SHAPE) 2))))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                      (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST (:ARG-INFO (1))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'COMPUTE-AREA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: COMPUTE-AREA
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'NIL
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LIST (FIND-CLASS 'CIRCLE))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'CIRCLE))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'CIRCLE)
  Context: (LIST (FIND-CLASS 'CIRCLE))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'CIRCLE)
  Parent: (LIST (FIND-CLASS 'CIRCLE))
  Depth: 5
WALK(ING):
  Expression: 'CIRCLE
  Context: (FIND-CLASS 'CIRCLE)
  Parent: (LIST (FIND-CLASS 'CIRCLE))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'CIRCLE
  Parent: (FIND-CLASS 'CIRCLE)
  Depth: 6
WALK(ING):
  Expression: CIRCLE
  Context: 'CIRCLE
  Parent: (FIND-CLASS 'CIRCLE)
  Depth: 6
WALK(ING):
  Expression: '(SHAPE)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER SHAPE))
                  (DECLARE (TYPE CIRCLE SHAPE))
                  (DECLARE (IGNORABLE SHAPE))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER SHAPE))
                 (DECLARE (TYPE CIRCLE SHAPE))
                 (DECLARE (IGNORABLE SHAPE))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER SHAPE))
               (DECLARE (TYPE CIRCLE SHAPE))
               (DECLARE (IGNORABLE SHAPE))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
                (DECLARE (SB-C::SOURCE-FORM (LAMBDA (SHAPE) (* PI #))))
                (DECLARE (SB-PCL::%PARAMETER SHAPE))
                (DECLARE (TYPE CIRCLE SHAPE))
                (DECLARE (IGNORABLE SHAPE))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((SHAPE)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (SHAPE) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS SHAPE CIRCLE))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
                  (DECLARE (SB-C::SOURCE-FORM (LAMBDA (SHAPE) (* PI #))))
                  (DECLARE (SB-PCL::%PARAMETER SHAPE))
                  (DECLARE (TYPE CIRCLE SHAPE))
                  (DECLARE (IGNORABLE SHAPE))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((SHAPE)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (SHAPE) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS SHAPE CIRCLE))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER SHAPE))
               (DECLARE (TYPE CIRCLE SHAPE))
               (DECLARE (IGNORABLE SHAPE))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF197 SB-PCL::MF)
                     (#:NEW196
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                         #:MF197))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF197 SB-PCL::MF)
                  (#:NEW196
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                      #:MF197))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF197 SB-PCL::MF)
               (#:NEW196
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO (1)))))
  Context: (LET* ((#:MF197 SB-PCL::MF)
                  (#:NEW196
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                      #:MF197))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF197 SB-PCL::MF)
  Context: ((#:MF197 SB-PCL::MF)
            (#:NEW196
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1)))))
  Parent: (LET* ((#:MF197 SB-PCL::MF)
                 (#:NEW196
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                     #:MF197))
  Depth: 7
WALK(ING):
  Expression: #:MF197
  Context: (#:MF197 SB-PCL::MF)
  Parent: ((#:MF197 SB-PCL::MF)
           (#:NEW196
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF197 SB-PCL::MF)
  Parent: ((#:MF197 SB-PCL::MF)
           (#:NEW196
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW196
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO (1))))
  Context: ((#:MF197 SB-PCL::MF)
            (#:NEW196
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1)))))
  Parent: (LET* ((#:MF197 SB-PCL::MF)
                 (#:NEW196
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                     #:MF197))
  Depth: 7
WALK(ING):
  Expression: #:NEW196
  Context: (#:NEW196
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1))))
  Parent: ((#:MF197 SB-PCL::MF)
           (#:NEW196
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1)))
  Context: (#:NEW196
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1))))
  Parent: ((#:MF197 SB-PCL::MF)
           (#:NEW196
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1)))
  Parent: (#:NEW196
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1)))
  Parent: (#:NEW196
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1)))
  Parent: (#:NEW196
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                       #:MF197)
  Context: (LET* ((#:MF197 SB-PCL::MF)
                  (#:NEW196
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                      #:MF197))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                    #:MF197)
  Parent: (LET* ((#:MF197 SB-PCL::MF)
                 (#:NEW196
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                     #:MF197))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                    #:MF197)
  Parent: (LET* ((#:MF197 SB-PCL::MF)
                 (#:NEW196
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                     #:MF197))
  Depth: 7
WALK(ING):
  Expression: #:NEW196
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                    #:MF197)
  Parent: (LET* ((#:MF197 SB-PCL::MF)
                 (#:NEW196
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                     #:MF197))
  Depth: 7
WALK(ING):
  Expression: #:MF197
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                    #:MF197)
  Parent: (LET* ((#:MF197 SB-PCL::MF)
                 (#:NEW196
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW196
                     #:MF197))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1)) SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:EXECUTE)
                (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                             ((* PI (EXPT # 2)))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI #)))))
  Parent: (DEFMETHOD COMPUTE-AREA ((SHAPE CIRCLE))
            (* PI (EXPT (CIRCLE-RADIUS SHAPE) 2)))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: (:EXECUTE)
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:EXECUTE)
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                           ((* PI
                                               (EXPT (CIRCLE-RADIUS SHAPE) 2))))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                      (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST (:ARG-INFO (1))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI (EXPT # 2)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'COMPUTE-AREA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                          ((* PI #)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'COMPUTE-AREA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: COMPUTE-AREA
  Context: 'COMPUTE-AREA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'NIL
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LIST (FIND-CLASS 'CIRCLE))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'CIRCLE))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'CIRCLE)
  Context: (LIST (FIND-CLASS 'CIRCLE))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'CIRCLE)
  Parent: (LIST (FIND-CLASS 'CIRCLE))
  Depth: 5
WALK(ING):
  Expression: 'CIRCLE
  Context: (FIND-CLASS 'CIRCLE)
  Parent: (LIST (FIND-CLASS 'CIRCLE))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'CIRCLE
  Parent: (FIND-CLASS 'CIRCLE)
  Depth: 6
WALK(ING):
  Expression: CIRCLE
  Context: 'CIRCLE
  Parent: (FIND-CLASS 'CIRCLE)
  Depth: 6
WALK(ING):
  Expression: '(SHAPE)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER SHAPE))
                  (DECLARE (TYPE CIRCLE SHAPE))
                  (DECLARE (IGNORABLE SHAPE))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER SHAPE))
                 (DECLARE (TYPE CIRCLE SHAPE))
                 (DECLARE (IGNORABLE SHAPE))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER SHAPE))
               (DECLARE (TYPE CIRCLE SHAPE))
               (DECLARE (IGNORABLE SHAPE))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
                (DECLARE (SB-C::SOURCE-FORM (LAMBDA (SHAPE) (* PI #))))
                (DECLARE (SB-PCL::%PARAMETER SHAPE))
                (DECLARE (TYPE CIRCLE SHAPE))
                (DECLARE (IGNORABLE SHAPE))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((SHAPE)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (SHAPE) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS SHAPE CIRCLE))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
                  (DECLARE (SB-C::SOURCE-FORM (LAMBDA (SHAPE) (* PI #))))
                  (DECLARE (SB-PCL::%PARAMETER SHAPE))
                  (DECLARE (TYPE CIRCLE SHAPE))
                  (DECLARE (IGNORABLE SHAPE))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((SHAPE)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (SHAPE) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS SHAPE CIRCLE))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL (CIRCLE) (SHAPE)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER SHAPE))
               (DECLARE (TYPE CIRCLE SHAPE))
               (DECLARE (IGNORABLE SHAPE))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA (CIRCLE))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD COMPUTE-AREA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER SHAPE))
              (DECLARE (TYPE CIRCLE SHAPE))
              (DECLARE (IGNORABLE SHAPE))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF199 SB-PCL::MF)
                     (#:NEW198
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                         #:MF199))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF199 SB-PCL::MF)
                  (#:NEW198
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                      #:MF199))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF199 SB-PCL::MF)
               (#:NEW198
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO (1)))))
  Context: (LET* ((#:MF199 SB-PCL::MF)
                  (#:NEW198
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                      #:MF199))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF199 SB-PCL::MF)
  Context: ((#:MF199 SB-PCL::MF)
            (#:NEW198
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1)))))
  Parent: (LET* ((#:MF199 SB-PCL::MF)
                 (#:NEW198
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                     #:MF199))
  Depth: 7
WALK(ING):
  Expression: #:MF199
  Context: (#:MF199 SB-PCL::MF)
  Parent: ((#:MF199 SB-PCL::MF)
           (#:NEW198
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF199 SB-PCL::MF)
  Parent: ((#:MF199 SB-PCL::MF)
           (#:NEW198
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW198
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO (1))))
  Context: ((#:MF199 SB-PCL::MF)
            (#:NEW198
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1)))))
  Parent: (LET* ((#:MF199 SB-PCL::MF)
                 (#:NEW198
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                     #:MF199))
  Depth: 7
WALK(ING):
  Expression: #:NEW198
  Context: (#:NEW198
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1))))
  Parent: ((#:MF199 SB-PCL::MF)
           (#:NEW198
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1)))
  Context: (#:NEW198
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1))))
  Parent: ((#:MF199 SB-PCL::MF)
           (#:NEW198
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1)))
  Parent: (#:NEW198
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1)))
  Parent: (#:NEW198
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1)))
  Parent: (#:NEW198
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                       #:MF199)
  Context: (LET* ((#:MF199 SB-PCL::MF)
                  (#:NEW198
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                      #:MF199))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                    #:MF199)
  Parent: (LET* ((#:MF199 SB-PCL::MF)
                 (#:NEW198
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                     #:MF199))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                    #:MF199)
  Parent: (LET* ((#:MF199 SB-PCL::MF)
                 (#:NEW198
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                     #:MF199))
  Depth: 7
WALK(ING):
  Expression: #:NEW198
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                    #:MF199)
  Parent: (LET* ((#:MF199 SB-PCL::MF)
                 (#:NEW198
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                     #:MF199))
  Depth: 7
WALK(ING):
  Expression: #:MF199
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                    #:MF199)
  Parent: (LET* ((#:MF199 SB-PCL::MF)
                 (#:NEW198
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW198
                     #:MF199))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD COMPUTE-AREA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. SHAPE)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1)) SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                   (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER COMPUTE-AREA NIL ((SHAPE CIRCLE))
                                         ((* PI (EXPT # 2)))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'COMPUTE-AREA 'NIL
                                  (LIST (FIND-CLASS 'CIRCLE)) '(SHAPE)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4

-------------------------------
WALK(ING):
  Expression: (DEFGENERIC PROCESS-DATA
                  (DATA &KEY)
                (:DOCUMENTATION "Process data with various methods"))
  Context: (DEFGENERIC PROCESS-DATA
               (DATA &KEY)
             (:DOCUMENTATION "Process data with various methods"))
  Parent: (DEFGENERIC PROCESS-DATA
              (DATA &KEY)
            (:DOCUMENTATION "Process data with various methods"))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                 (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
               (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                        (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                        '"Process data with various methods")
               (FDEFINITION 'PROCESS-DATA))
  Context: (DEFGENERIC PROCESS-DATA
               (DATA &KEY)
             (:DOCUMENTATION "Process data with various methods"))
  Parent: (DEFGENERIC PROCESS-DATA
              (DATA &KEY)
            (:DOCUMENTATION "Process data with various methods"))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Process data with various methods")
            (FDEFINITION 'PROCESS-DATA))
  Parent: (DEFGENERIC PROCESS-DATA
              (DATA &KEY)
            (:DOCUMENTATION "Process data with various methods"))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Process data with various methods")
            (FDEFINITION 'PROCESS-DATA))
  Parent: (DEFGENERIC PROCESS-DATA
              (DATA &KEY)
            (:DOCUMENTATION "Process data with various methods"))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::COMPILE-OR-LOAD-DEFGENERIC
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                       (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                       '"Process data with various methods")
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Process data with various methods")
            (FDEFINITION 'PROCESS-DATA))
  Parent: (DEFGENERIC PROCESS-DATA
              (DATA &KEY)
            (:DOCUMENTATION "Process data with various methods"))
  Depth: 1
WALK(ING):
  Expression: SB-PCL::LOAD-DEFGENERIC
  Context: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                   (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                   '"Process data with various methods")
  Depth: 3
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                   (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                   '"Process data with various methods")
  Depth: 3
WALK(ING):
  Expression: '(DATA &KEY)
  Context: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                   (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                   '"Process data with various methods")
  Depth: 3
WALK(ING):
  Expression: :DOCUMENTATION
  Context: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: '"Process data with various methods"
  Context: (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: (FDEFINITION 'PROCESS-DATA)
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                     (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                     '"Process data with various methods")
            (FDEFINITION 'PROCESS-DATA))
  Parent: (DEFGENERIC PROCESS-DATA
              (DATA &KEY)
            (:DOCUMENTATION "Process data with various methods"))
  Depth: 1
WALK(ING):
  Expression: FDEFINITION
  Context: (FDEFINITION 'PROCESS-DATA)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (FDEFINITION 'PROCESS-DATA)
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (SB-PCL::LOAD-DEFGENERIC 'PROCESS-DATA '(DATA &KEY)
                                    (SB-C:SOURCE-LOCATION) :DOCUMENTATION
                                    '"Process data with various methods")
           (FDEFINITION 'PROCESS-DATA))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (FDEFINITION 'PROCESS-DATA)
  Depth: 3
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (FDEFINITION 'PROCESS-DATA)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Context: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                 (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
               (EVAL-WHEN (:LOAD-TOPLEVEL)
                 (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                              ((DATA STRING) &KEY)
                                              ((STRING-UPCASE DATA))))
               (EVAL-WHEN (:EXECUTE)
                 (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                              ((DATA STRING) &KEY)
                                              ((STRING-UPCASE DATA)))))
  Context: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::COMPILE-OR-LOAD-DEFGENERIC
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:LOAD-TOPLEVEL)
                (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                             ((DATA STRING) &KEY)
                                             ((STRING-UPCASE DATA))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: (:LOAD-TOPLEVEL)
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:LOAD-TOPLEVEL)
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA)))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                      (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST
                                               (:ARG-INFO (1 . T))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'NIL
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LIST (FIND-CLASS 'STRING))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'STRING)
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: 'STRING
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: STRING
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: '(DATA &KEY)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                           &ALLOW-OTHER-KEYS)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                    &ALLOW-OTHER-KEYS)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING)
                   (DATA &KEY)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER DATA))
                 (DECLARE (TYPE STRING DATA))
                 (DECLARE (IGNORABLE DATA))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                   &ALLOW-OTHER-KEYS)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING)
                  (DATA &KEY)))
                (DECLARE
                 (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY) (STRING-UPCASE DATA))))
                (DECLARE (SB-PCL::%PARAMETER DATA))
                (DECLARE (TYPE STRING DATA))
                (DECLARE (IGNORABLE DATA))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (DATA) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS DATA STRING))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING)
                    (DATA &KEY)))
                  (DECLARE
                   (SB-C::SOURCE-FORM
                    (LAMBDA (DATA &KEY) (STRING-UPCASE DATA))))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (DATA) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS DATA STRING))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1 . T))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF201 SB-PCL::MF)
                     (#:NEW200
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                         #:MF201))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF201 SB-PCL::MF)
                  (#:NEW200
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                      #:MF201))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF201 SB-PCL::MF)
               (#:NEW200
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO
                                                              (1 . T)))))
  Context: (LET* ((#:MF201 SB-PCL::MF)
                  (#:NEW200
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                      #:MF201))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF201 SB-PCL::MF)
  Context: ((#:MF201 SB-PCL::MF)
            (#:NEW200
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF201 SB-PCL::MF)
                 (#:NEW200
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                     #:MF201))
  Depth: 7
WALK(ING):
  Expression: #:MF201
  Context: (#:MF201 SB-PCL::MF)
  Parent: ((#:MF201 SB-PCL::MF)
           (#:NEW200
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF201 SB-PCL::MF)
  Parent: ((#:MF201 SB-PCL::MF)
           (#:NEW200
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW200
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO
                                                             (1 . T))))
  Context: ((#:MF201 SB-PCL::MF)
            (#:NEW200
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF201 SB-PCL::MF)
                 (#:NEW200
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                     #:MF201))
  Depth: 7
WALK(ING):
  Expression: #:NEW200
  Context: (#:NEW200
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF201 SB-PCL::MF)
           (#:NEW200
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1 . T)))
  Context: (#:NEW200
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF201 SB-PCL::MF)
           (#:NEW200
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW200
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW200
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1 . T))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW200
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                       #:MF201)
  Context: (LET* ((#:MF201 SB-PCL::MF)
                  (#:NEW200
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                      #:MF201))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                    #:MF201)
  Parent: (LET* ((#:MF201 SB-PCL::MF)
                 (#:NEW200
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                     #:MF201))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                    #:MF201)
  Parent: (LET* ((#:MF201 SB-PCL::MF)
                 (#:NEW200
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                     #:MF201))
  Depth: 7
WALK(ING):
  Expression: #:NEW200
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                    #:MF201)
  Parent: (LET* ((#:MF201 SB-PCL::MF)
                 (#:NEW200
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                     #:MF201))
  Depth: 7
WALK(ING):
  Expression: #:MF201
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                    #:MF201)
  Parent: (LET* ((#:MF201 SB-PCL::MF)
                 (#:NEW200
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW200
                     #:MF201))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:EXECUTE)
                (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                             ((DATA STRING) &KEY)
                                             ((STRING-UPCASE DATA))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA STRING) &KEY) (STRING-UPCASE DATA))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: (:EXECUTE)
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:EXECUTE)
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA STRING) &KEY)
                                           ((STRING-UPCASE DATA)))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                      (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST
                                               (:ARG-INFO (1 . T))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                          ((STRING-UPCASE DATA)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'NIL
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LIST (FIND-CLASS 'STRING))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'STRING)
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: 'STRING
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: STRING
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: '(DATA &KEY)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                           &ALLOW-OTHER-KEYS)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                    &ALLOW-OTHER-KEYS)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING)
                   (DATA &KEY)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER DATA))
                 (DECLARE (TYPE STRING DATA))
                 (DECLARE (IGNORABLE DATA))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                   &ALLOW-OTHER-KEYS)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING)
                  (DATA &KEY)))
                (DECLARE
                 (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY) (STRING-UPCASE DATA))))
                (DECLARE (SB-PCL::%PARAMETER DATA))
                (DECLARE (TYPE STRING DATA))
                (DECLARE (IGNORABLE DATA))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (DATA) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS DATA STRING))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING)
                    (DATA &KEY)))
                  (DECLARE
                   (SB-C::SOURCE-FORM
                    (LAMBDA (DATA &KEY) (STRING-UPCASE DATA))))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (DATA) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS DATA STRING))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (STRING) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1 . T))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF203 SB-PCL::MF)
                     (#:NEW202
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                         #:MF203))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF203 SB-PCL::MF)
                  (#:NEW202
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                      #:MF203))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF203 SB-PCL::MF)
               (#:NEW202
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO
                                                              (1 . T)))))
  Context: (LET* ((#:MF203 SB-PCL::MF)
                  (#:NEW202
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                      #:MF203))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF203 SB-PCL::MF)
  Context: ((#:MF203 SB-PCL::MF)
            (#:NEW202
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF203 SB-PCL::MF)
                 (#:NEW202
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                     #:MF203))
  Depth: 7
WALK(ING):
  Expression: #:MF203
  Context: (#:MF203 SB-PCL::MF)
  Parent: ((#:MF203 SB-PCL::MF)
           (#:NEW202
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF203 SB-PCL::MF)
  Parent: ((#:MF203 SB-PCL::MF)
           (#:NEW202
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW202
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO
                                                             (1 . T))))
  Context: ((#:MF203 SB-PCL::MF)
            (#:NEW202
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF203 SB-PCL::MF)
                 (#:NEW202
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                     #:MF203))
  Depth: 7
WALK(ING):
  Expression: #:NEW202
  Context: (#:NEW202
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF203 SB-PCL::MF)
           (#:NEW202
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1 . T)))
  Context: (#:NEW202
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF203 SB-PCL::MF)
           (#:NEW202
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW202
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW202
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1 . T))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW202
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                       #:MF203)
  Context: (LET* ((#:MF203 SB-PCL::MF)
                  (#:NEW202
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                      #:MF203))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                    #:MF203)
  Parent: (LET* ((#:MF203 SB-PCL::MF)
                 (#:NEW202
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                     #:MF203))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                    #:MF203)
  Parent: (LET* ((#:MF203 SB-PCL::MF)
                 (#:NEW202
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                     #:MF203))
  Depth: 7
WALK(ING):
  Expression: #:NEW202
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                    #:MF203)
  Parent: (LET* ((#:MF203 SB-PCL::MF)
                 (#:NEW202
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                     #:MF203))
  Depth: 7
WALK(ING):
  Expression: #:MF203
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                    #:MF203)
  Parent: (LET* ((#:MF203 SB-PCL::MF)
                 (#:NEW202
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW202
                     #:MF203))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA STRING) &KEY)
                                         ((STRING-UPCASE DATA))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'STRING)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4

-------------------------------
WALK(ING):
  Expression: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Context: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                 (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
               (EVAL-WHEN (:LOAD-TOPLEVEL)
                 (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                              ((DATA NUMBER) &KEY)
                                              ((1+ DATA))))
               (EVAL-WHEN (:EXECUTE)
                 (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                              ((DATA NUMBER) &KEY)
                                              ((1+ DATA)))))
  Context: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::COMPILE-OR-LOAD-DEFGENERIC
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:LOAD-TOPLEVEL)
                (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                             ((DATA NUMBER) &KEY) ((1+ DATA))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: (:LOAD-TOPLEVEL)
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:LOAD-TOPLEVEL)
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA)))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                      (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST
                                               (:ARG-INFO (1 . T))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'NIL
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LIST (FIND-CLASS 'NUMBER))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'NUMBER))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'NUMBER)
  Context: (LIST (FIND-CLASS 'NUMBER))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'NUMBER)
  Parent: (LIST (FIND-CLASS 'NUMBER))
  Depth: 5
WALK(ING):
  Expression: 'NUMBER
  Context: (FIND-CLASS 'NUMBER)
  Parent: (LIST (FIND-CLASS 'NUMBER))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'NUMBER
  Parent: (FIND-CLASS 'NUMBER)
  Depth: 6
WALK(ING):
  Expression: NUMBER
  Context: 'NUMBER
  Parent: (FIND-CLASS 'NUMBER)
  Depth: 6
WALK(ING):
  Expression: '(DATA &KEY)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                           &ALLOW-OTHER-KEYS)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE NUMBER DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                    &ALLOW-OTHER-KEYS)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER)
                   (DATA &KEY)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER DATA))
                 (DECLARE (TYPE NUMBER DATA))
                 (DECLARE (IGNORABLE DATA))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE NUMBER DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                   &ALLOW-OTHER-KEYS)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER)
                  (DATA &KEY)))
                (DECLARE (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY) (1+ DATA))))
                (DECLARE (SB-PCL::%PARAMETER DATA))
                (DECLARE (TYPE NUMBER DATA))
                (DECLARE (IGNORABLE DATA))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (DATA) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS DATA NUMBER))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER)
                    (DATA &KEY)))
                  (DECLARE (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY) (1+ DATA))))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE NUMBER DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (DATA) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS DATA NUMBER))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE NUMBER DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1 . T))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF205 SB-PCL::MF)
                     (#:NEW204
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                         #:MF205))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF205 SB-PCL::MF)
                  (#:NEW204
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                      #:MF205))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF205 SB-PCL::MF)
               (#:NEW204
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO
                                                              (1 . T)))))
  Context: (LET* ((#:MF205 SB-PCL::MF)
                  (#:NEW204
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                      #:MF205))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF205 SB-PCL::MF)
  Context: ((#:MF205 SB-PCL::MF)
            (#:NEW204
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF205 SB-PCL::MF)
                 (#:NEW204
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                     #:MF205))
  Depth: 7
WALK(ING):
  Expression: #:MF205
  Context: (#:MF205 SB-PCL::MF)
  Parent: ((#:MF205 SB-PCL::MF)
           (#:NEW204
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF205 SB-PCL::MF)
  Parent: ((#:MF205 SB-PCL::MF)
           (#:NEW204
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW204
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO
                                                             (1 . T))))
  Context: ((#:MF205 SB-PCL::MF)
            (#:NEW204
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF205 SB-PCL::MF)
                 (#:NEW204
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                     #:MF205))
  Depth: 7
WALK(ING):
  Expression: #:NEW204
  Context: (#:NEW204
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF205 SB-PCL::MF)
           (#:NEW204
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1 . T)))
  Context: (#:NEW204
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF205 SB-PCL::MF)
           (#:NEW204
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW204
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW204
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1 . T))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW204
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                       #:MF205)
  Context: (LET* ((#:MF205 SB-PCL::MF)
                  (#:NEW204
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                      #:MF205))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                    #:MF205)
  Parent: (LET* ((#:MF205 SB-PCL::MF)
                 (#:NEW204
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                     #:MF205))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                    #:MF205)
  Parent: (LET* ((#:MF205 SB-PCL::MF)
                 (#:NEW204
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                     #:MF205))
  Depth: 7
WALK(ING):
  Expression: #:NEW204
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                    #:MF205)
  Parent: (LET* ((#:MF205 SB-PCL::MF)
                 (#:NEW204
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                     #:MF205))
  Depth: 7
WALK(ING):
  Expression: #:MF205
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                    #:MF205)
  Parent: (LET* ((#:MF205 SB-PCL::MF)
                 (#:NEW204
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW204
                     #:MF205))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:EXECUTE)
                (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                             ((DATA NUMBER) &KEY) ((1+ DATA))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA)))))
  Parent: (DEFMETHOD PROCESS-DATA ((DATA NUMBER) &KEY) (1+ DATA))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: (:EXECUTE)
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:EXECUTE)
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL
                                           ((DATA NUMBER) &KEY) ((1+ DATA)))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                      (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST
                                               (:ARG-INFO (1 . T))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                          ((1+ DATA)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'NIL
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LIST (FIND-CLASS 'NUMBER))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'NUMBER))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'NUMBER)
  Context: (LIST (FIND-CLASS 'NUMBER))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'NUMBER)
  Parent: (LIST (FIND-CLASS 'NUMBER))
  Depth: 5
WALK(ING):
  Expression: 'NUMBER
  Context: (FIND-CLASS 'NUMBER)
  Parent: (LIST (FIND-CLASS 'NUMBER))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'NUMBER
  Parent: (FIND-CLASS 'NUMBER)
  Depth: 6
WALK(ING):
  Expression: NUMBER
  Context: 'NUMBER
  Parent: (FIND-CLASS 'NUMBER)
  Depth: 6
WALK(ING):
  Expression: '(DATA &KEY)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                           &ALLOW-OTHER-KEYS)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE NUMBER DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                    &ALLOW-OTHER-KEYS)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER)
                   (DATA &KEY)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER DATA))
                 (DECLARE (TYPE NUMBER DATA))
                 (DECLARE (IGNORABLE DATA))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE NUMBER DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                   &ALLOW-OTHER-KEYS)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER)
                  (DATA &KEY)))
                (DECLARE (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY) (1+ DATA))))
                (DECLARE (SB-PCL::%PARAMETER DATA))
                (DECLARE (TYPE NUMBER DATA))
                (DECLARE (IGNORABLE DATA))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (DATA) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS DATA NUMBER))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER)
                    (DATA &KEY)))
                  (DECLARE (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY) (1+ DATA))))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE NUMBER DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (DATA) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS DATA NUMBER))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL (NUMBER) (DATA &KEY)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE NUMBER DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA (NUMBER))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA NIL # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE NUMBER DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1 . T))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF207 SB-PCL::MF)
                     (#:NEW206
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                         #:MF207))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF207 SB-PCL::MF)
                  (#:NEW206
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                      #:MF207))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF207 SB-PCL::MF)
               (#:NEW206
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO
                                                              (1 . T)))))
  Context: (LET* ((#:MF207 SB-PCL::MF)
                  (#:NEW206
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                      #:MF207))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF207 SB-PCL::MF)
  Context: ((#:MF207 SB-PCL::MF)
            (#:NEW206
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF207 SB-PCL::MF)
                 (#:NEW206
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                     #:MF207))
  Depth: 7
WALK(ING):
  Expression: #:MF207
  Context: (#:MF207 SB-PCL::MF)
  Parent: ((#:MF207 SB-PCL::MF)
           (#:NEW206
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF207 SB-PCL::MF)
  Parent: ((#:MF207 SB-PCL::MF)
           (#:NEW206
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW206
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO
                                                             (1 . T))))
  Context: ((#:MF207 SB-PCL::MF)
            (#:NEW206
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF207 SB-PCL::MF)
                 (#:NEW206
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                     #:MF207))
  Depth: 7
WALK(ING):
  Expression: #:NEW206
  Context: (#:NEW206
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF207 SB-PCL::MF)
           (#:NEW206
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1 . T)))
  Context: (#:NEW206
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF207 SB-PCL::MF)
           (#:NEW206
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW206
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW206
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1 . T))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW206
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                       #:MF207)
  Context: (LET* ((#:MF207 SB-PCL::MF)
                  (#:NEW206
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                      #:MF207))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                    #:MF207)
  Parent: (LET* ((#:MF207 SB-PCL::MF)
                 (#:NEW206
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                     #:MF207))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                    #:MF207)
  Parent: (LET* ((#:MF207 SB-PCL::MF)
                 (#:NEW206
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                     #:MF207))
  Depth: 7
WALK(ING):
  Expression: #:NEW206
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                    #:MF207)
  Parent: (LET* ((#:MF207 SB-PCL::MF)
                 (#:NEW206
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                     #:MF207))
  Depth: 7
WALK(ING):
  Expression: #:MF207
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                    #:MF207)
  Parent: (LET* ((#:MF207 SB-PCL::MF)
                 (#:NEW206
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW206
                     #:MF207))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                   (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA NIL ((DATA NUMBER) &KEY)
                                         ((1+ DATA))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA 'NIL
                                  (LIST (FIND-CLASS 'NUMBER)) '(DATA &KEY)
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4

-------------------------------
WALK(ING):
  Expression: (DEFMETHOD PROCESS-DATA :AFTER
                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Context: (DEFMETHOD PROCESS-DATA :AFTER
                      ((DATA STRING) &KEY (LOG-LEVEL :INFO))
             (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Parent: (DEFMETHOD PROCESS-DATA :AFTER ((DATA STRING) &KEY (LOG-LEVEL :INFO))
            (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                 (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
               (EVAL-WHEN (:LOAD-TOPLEVEL)
                 (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                              ((DATA STRING) &KEY
                                               (LOG-LEVEL :INFO))
                                              ((WHEN # #))))
               (EVAL-WHEN (:EXECUTE)
                 (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                              ((DATA STRING) &KEY
                                               (LOG-LEVEL :INFO))
                                              ((WHEN # #)))))
  Context: (DEFMETHOD PROCESS-DATA :AFTER
                      ((DATA STRING) &KEY (LOG-LEVEL :INFO))
             (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Parent: (DEFMETHOD PROCESS-DATA :AFTER ((DATA STRING) &KEY (LOG-LEVEL :INFO))
            (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #)))))
  Parent: (DEFMETHOD PROCESS-DATA :AFTER ((DATA STRING) &KEY (LOG-LEVEL :INFO))
            (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
                (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #)))))
  Parent: (DEFMETHOD PROCESS-DATA :AFTER ((DATA STRING) &KEY (LOG-LEVEL :INFO))
            (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::COMPILE-OR-LOAD-DEFGENERIC
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
            (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA)
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:LOAD-TOPLEVEL)
                (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                             ((DATA STRING) &KEY
                                              (LOG-LEVEL :INFO))
                                             ((WHEN (EQ LOG-LEVEL :INFO)
                                                (FORMAT NIL "LOG: ~A" DATA)))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #)))))
  Parent: (DEFMETHOD PROCESS-DATA :AFTER ((DATA STRING) &KEY (LOG-LEVEL :INFO))
            (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: (:LOAD-TOPLEVEL)
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:LOAD-TOPLEVEL)
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN (EQ LOG-LEVEL :INFO)
                                              (FORMAT NIL "LOG: ~A" DATA))))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                      (LIST (FIND-CLASS 'STRING))
                                      '(DATA &KEY (LOG-LEVEL :INFO))
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST
                                               (:ARG-INFO (1 . T))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: '(:AFTER)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: (LIST (FIND-CLASS 'STRING))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'STRING)
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: 'STRING
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: STRING
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: '(DATA &KEY (LOG-LEVEL :INFO))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                            :AFTER #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                           &ALLOW-OTHER-KEYS)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                      (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                     (STRING))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                    (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                   (DATA &KEY #)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER DATA))
                 (DECLARE (TYPE STRING DATA))
                 (DECLARE (IGNORABLE DATA))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                   (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                (DATA &KEY #)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                    (STRING))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                   (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                  (DATA &KEY (LOG-LEVEL :INFO))))
                (DECLARE (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY #) (WHEN # #))))
                (DECLARE (SB-PCL::%PARAMETER DATA))
                (DECLARE (TYPE STRING DATA))
                (DECLARE (IGNORABLE DATA))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (DATA) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS DATA STRING))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                (DATA &KEY #)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                      (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                    (DATA &KEY (LOG-LEVEL :INFO))))
                  (DECLARE
                   (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY #) (WHEN # #))))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (DATA) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS DATA STRING))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                (DATA &KEY #)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                   (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1 . T))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF209 SB-PCL::MF)
                     (#:NEW208
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                         #:MF209))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF209 SB-PCL::MF)
                  (#:NEW208
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                      #:MF209))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF209 SB-PCL::MF)
               (#:NEW208
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO
                                                              (1 . T)))))
  Context: (LET* ((#:MF209 SB-PCL::MF)
                  (#:NEW208
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                      #:MF209))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF209 SB-PCL::MF)
  Context: ((#:MF209 SB-PCL::MF)
            (#:NEW208
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF209 SB-PCL::MF)
                 (#:NEW208
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                     #:MF209))
  Depth: 7
WALK(ING):
  Expression: #:MF209
  Context: (#:MF209 SB-PCL::MF)
  Parent: ((#:MF209 SB-PCL::MF)
           (#:NEW208
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF209 SB-PCL::MF)
  Parent: ((#:MF209 SB-PCL::MF)
           (#:NEW208
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW208
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO
                                                             (1 . T))))
  Context: ((#:MF209 SB-PCL::MF)
            (#:NEW208
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF209 SB-PCL::MF)
                 (#:NEW208
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                     #:MF209))
  Depth: 7
WALK(ING):
  Expression: #:NEW208
  Context: (#:NEW208
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF209 SB-PCL::MF)
           (#:NEW208
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1 . T)))
  Context: (#:NEW208
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF209 SB-PCL::MF)
           (#:NEW208
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW208
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW208
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1 . T))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW208
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                       #:MF209)
  Context: (LET* ((#:MF209 SB-PCL::MF)
                  (#:NEW208
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                      #:MF209))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                    #:MF209)
  Parent: (LET* ((#:MF209 SB-PCL::MF)
                 (#:NEW208
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                     #:MF209))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                    #:MF209)
  Parent: (LET* ((#:MF209 SB-PCL::MF)
                 (#:NEW208
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                     #:MF209))
  Depth: 7
WALK(ING):
  Expression: #:NEW208
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                    #:MF209)
  Parent: (LET* ((#:MF209 SB-PCL::MF)
                 (#:NEW208
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                     #:MF209))
  Depth: 7
WALK(ING):
  Expression: #:MF209
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                    #:MF209)
  Parent: (LET* ((#:MF209 SB-PCL::MF)
                 (#:NEW208
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW208
                     #:MF209))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:LOAD-TOPLEVEL)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:EXECUTE)
                (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                             ((DATA STRING) &KEY
                                              (LOG-LEVEL :INFO))
                                             ((WHEN (EQ LOG-LEVEL :INFO)
                                                (FORMAT NIL "LOG: ~A" DATA)))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
              (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
            (EVAL-WHEN (:LOAD-TOPLEVEL)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #))))
            (EVAL-WHEN (:EXECUTE)
              (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN # #)))))
  Parent: (DEFMETHOD PROCESS-DATA :AFTER ((DATA STRING) &KEY (LOG-LEVEL :INFO))
            (WHEN (EQ LOG-LEVEL :INFO) (FORMAT NIL "LOG: ~A" DATA)))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: (:EXECUTE)
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:EXECUTE)
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                           ((DATA STRING) &KEY
                                            (LOG-LEVEL :INFO))
                                           ((WHEN (EQ LOG-LEVEL :INFO)
                                              (FORMAT NIL "LOG: ~A" DATA))))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                      (LIST (FIND-CLASS 'STRING))
                                      '(DATA &KEY (LOG-LEVEL :INFO))
                                      (LIST* :FUNCTION
                                             (LET* ((SB-PCL::FMF #)
                                                    (SB-PCL::MF #))
                                               (SETF # #)
                                               SB-PCL::MF)
                                             '(SB-PCL::PLIST
                                               (:ARG-INFO (1 . T))
                                               SB-PCL::SIMPLE-NEXT-METHOD-CALL
                                               T))
                                      (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN (EQ LOG-LEVEL :INFO)
                                             (FORMAT NIL "LOG: ~A" DATA)))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL :EXECUTE)
             (SB-PCL::COMPILE-OR-LOAD-DEFGENERIC 'PROCESS-DATA))
           (EVAL-WHEN (:LOAD-TOPLEVEL)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #))))
           (EVAL-WHEN (:EXECUTE)
             (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                          ((DATA STRING) &KEY
                                           (LOG-LEVEL :INFO))
                                          ((WHEN # #)))))
  Depth: 2
WALK(ING):
  Expression: SB-PCL::LOAD-DEFMETHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: 'STANDARD-METHOD
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: STANDARD-METHOD
  Context: 'STANDARD-METHOD
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: 'PROCESS-DATA
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: PROCESS-DATA
  Context: 'PROCESS-DATA
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: '(:AFTER)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: (LIST (FIND-CLASS 'STRING))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: LIST
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (FIND-CLASS 'STRING)
  Context: (LIST (FIND-CLASS 'STRING))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: FIND-CLASS
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: 'STRING
  Context: (FIND-CLASS 'STRING)
  Parent: (LIST (FIND-CLASS 'STRING))
  Depth: 5
WALK(ING):
  Expression: QUOTE
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: STRING
  Context: 'STRING
  Parent: (FIND-CLASS 'STRING)
  Depth: 6
WALK(ING):
  Expression: '(DATA &KEY (LOG-LEVEL :INFO))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: (LIST* :FUNCTION
                     (LET* ((SB-PCL::FMF
                             (SB-INT:NAMED-LAMBDA #
                                 #
                               #
                               #
                               #
                               #
                               #
                               #
                               #))
                            (SB-PCL::MF
                             (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                       (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                                SB-PCL::FMF '#))
                       SB-PCL::MF)
                     '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                       SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: LIST*
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: :FUNCTION
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (LET* ((SB-PCL::FMF
                      (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                            :AFTER #)
                          (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                           &ALLOW-OTHER-KEYS)
                        (DECLARE #
                                 #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (DECLARE #)
                        (SYMBOL-MACROLET #
                          #)))
                     (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                        (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                    '(:ARG-INFO
                                                                      #)))
                SB-PCL::MF)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: LET*
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: ((SB-PCL::FMF
                (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                      (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
                  (DECLARE (SB-C::SOURCE-FORM #))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET (#)
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                      #
                      #))))
               (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (SB-PCL::FMF
               (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                     (STRING))
                   (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                    (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                 (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                          (SB-EXT:DISABLE-PACKAGE-LOCKS
                           SB-PCL::PV-ENV-ENVIRONMENT))
                 (DECLARE
                  (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                   (DATA &KEY #)))
                 (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
                 (DECLARE (SB-PCL::%PARAMETER DATA))
                 (DECLARE (TYPE STRING DATA))
                 (DECLARE (IGNORABLE DATA))
                 (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                   (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                           SB-PCL::.NEXT-METHOD-CALL.
                                                           # NIL
                                                           :CALL-NEXT-METHOD-P
                                                           NIL :SETQ-P NIL
                                                           :PARAMETERS-SETQD
                                                           NIL ...)
                     (DECLARE #)
                     (LOCALLY # #)))))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                   (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                (DATA &KEY #)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                    (STRING))
                  (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                   (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                         (SB-EXT:DISABLE-PACKAGE-LOCKS
                          SB-PCL::PV-ENV-ENVIRONMENT))
                (DECLARE
                 (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                  (DATA &KEY (LOG-LEVEL :INFO))))
                (DECLARE (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY #) (WHEN # #))))
                (DECLARE (SB-PCL::%PARAMETER DATA))
                (DECLARE (TYPE STRING DATA))
                (DECLARE (IGNORABLE DATA))
                (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                  (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                          SB-PCL::.NEXT-METHOD-CALL.
                                                          (DATA) NIL
                                                          :CALL-NEXT-METHOD-P
                                                          NIL :SETQ-P NIL
                                                          :PARAMETERS-SETQD NIL
                                                          ...)
                    (DECLARE (SB-PCL::%CLASS DATA STRING))
                    (LOCALLY
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #
                       #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                (DATA &KEY #)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                      (STRING))
                    (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                     (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
                  (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                           (SB-EXT:DISABLE-PACKAGE-LOCKS
                            SB-PCL::PV-ENV-ENVIRONMENT))
                  (DECLARE
                   (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                    (DATA &KEY (LOG-LEVEL :INFO))))
                  (DECLARE
                   (SB-C::SOURCE-FORM (LAMBDA (DATA &KEY #) (WHEN # #))))
                  (DECLARE (SB-PCL::%PARAMETER DATA))
                  (DECLARE (TYPE STRING DATA))
                  (DECLARE (IGNORABLE DATA))
                  (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT
                                     SB-PCL::DEFAULT))
                    (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS ((DATA)
                                                            SB-PCL::.NEXT-METHOD-CALL.
                                                            (DATA) NIL
                                                            :CALL-NEXT-METHOD-P
                                                            NIL :SETQ-P NIL
                                                            :PARAMETERS-SETQD
                                                            NIL ...)
                      (DECLARE (SB-PCL::%CLASS DATA STRING))
                      (LOCALLY
                       (DECLARE #)
                       (SYMBOL-MACROLET #
                         #
                         #)))))
  Context: (SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE
               (SB-C::CURRENT-DEFMETHOD PROCESS-DATA (:AFTER) (STRING)
                (DATA &KEY #)))
              (DECLARE (SB-C::SOURCE-FORM (LAMBDA # #)))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET ((SB-PCL::PV-ENV-ENVIRONMENT SB-PCL::DEFAULT))
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS (#
                                                        SB-PCL::.NEXT-METHOD-CALL.
                                                        # NIL
                                                        :CALL-NEXT-METHOD-P NIL
                                                        :SETQ-P NIL
                                                        :PARAMETERS-SETQD NIL
                                                        ...)
                  (DECLARE #)
                  (LOCALLY # #)))))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Context: ((SB-PCL::FMF
             (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                   (STRING))
                 (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                  (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
               (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                        (SB-EXT:DISABLE-PACKAGE-LOCKS
                         SB-PCL::PV-ENV-ENVIRONMENT))
               (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
               (DECLARE (SB-C::SOURCE-FORM #))
               (DECLARE (SB-PCL::%PARAMETER DATA))
               (DECLARE (TYPE STRING DATA))
               (DECLARE (IGNORABLE DATA))
               (SYMBOL-MACROLET (#)
                 (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                   #
                   #))))
            (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: SB-PCL::MF
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Context: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Parent: ((SB-PCL::FMF
            (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                  (STRING))
                (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY
                 (LOG-LEVEL :INFO) &ALLOW-OTHER-KEYS)
              (DECLARE (IGNORABLE SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL.)
                       (SB-EXT:DISABLE-PACKAGE-LOCKS
                        SB-PCL::PV-ENV-ENVIRONMENT))
              (DECLARE (SB-C::CURRENT-DEFMETHOD PROCESS-DATA # # #))
              (DECLARE (SB-C::SOURCE-FORM #))
              (DECLARE (SB-PCL::%PARAMETER DATA))
              (DECLARE (TYPE STRING DATA))
              (DECLARE (IGNORABLE DATA))
              (SYMBOL-MACROLET (#)
                (SB-PCL::FAST-LEXICAL-METHOD-FUNCTIONS #
                  #
                  #))))
           (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::%MAKE-METHOD-FUNCTION
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)
  Parent: (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF))
  Depth: 8
WALK(ING):
  Expression: (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    (1 . T))))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: (LET* ((#:MF211 SB-PCL::MF)
                     (#:NEW210
                      (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                  '(:ARG-INFO
                                                                    #))))
                (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                         #:MF211))
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:MF211 SB-PCL::MF)
                  (#:NEW210
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                      #:MF211))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: ((#:MF211 SB-PCL::MF)
               (#:NEW210
                (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                            '(:ARG-INFO
                                                              (1 . T)))))
  Context: (LET* ((#:MF211 SB-PCL::MF)
                  (#:NEW210
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                      #:MF211))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: (#:MF211 SB-PCL::MF)
  Context: ((#:MF211 SB-PCL::MF)
            (#:NEW210
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF211 SB-PCL::MF)
                 (#:NEW210
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                     #:MF211))
  Depth: 7
WALK(ING):
  Expression: #:MF211
  Context: (#:MF211 SB-PCL::MF)
  Parent: ((#:MF211 SB-PCL::MF)
           (#:NEW210
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::MF
  Context: (#:MF211 SB-PCL::MF)
  Parent: ((#:MF211 SB-PCL::MF)
           (#:NEW210
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (#:NEW210
               (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                           '(:ARG-INFO
                                                             (1 . T))))
  Context: ((#:MF211 SB-PCL::MF)
            (#:NEW210
             (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                         '(:ARG-INFO (1 . T)))))
  Parent: (LET* ((#:MF211 SB-PCL::MF)
                 (#:NEW210
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                     #:MF211))
  Depth: 7
WALK(ING):
  Expression: #:NEW210
  Context: (#:NEW210
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF211 SB-PCL::MF)
           (#:NEW210
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                          '(:ARG-INFO (1 . T)))
  Context: (#:NEW210
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T))))
  Parent: ((#:MF211 SB-PCL::MF)
           (#:NEW210
            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                        '(:ARG-INFO (1 . T)))))
  Depth: 8
WALK(ING):
  Expression: SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW210
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: SB-PCL::FMF
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW210
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: '(:ARG-INFO (1 . T))
  Context: (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T)))
  Parent: (#:NEW210
           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                       '(:ARG-INFO (1 . T))))
  Depth: 9
WALK(ING):
  Expression: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                       #:MF211)
  Context: (LET* ((#:MF211 SB-PCL::MF)
                  (#:NEW210
                   (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                               '(:ARG-INFO #))))
             (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                      #:MF211))
  Parent: (LET* ((SB-PCL::FMF
                  (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA :AFTER
                                        #)
                      (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                       &ALLOW-OTHER-KEYS)
                    (DECLARE #
                             #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (DECLARE #)
                    (SYMBOL-MACROLET #
                      #)))
                 (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
            (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                    (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                '(:ARG-INFO
                                                                  #)))
            SB-PCL::MF)
  Depth: 6
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                    #:MF211)
  Parent: (LET* ((#:MF211 SB-PCL::MF)
                 (#:NEW210
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                     #:MF211))
  Depth: 7
WALK(ING):
  Expression: #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN)
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                    #:MF211)
  Parent: (LET* ((#:MF211 SB-PCL::MF)
                 (#:NEW210
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                     #:MF211))
  Depth: 7
WALK(ING):
  Expression: #:NEW210
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                    #:MF211)
  Parent: (LET* ((#:MF211 SB-PCL::MF)
                 (#:NEW210
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                     #:MF211))
  Depth: 7
WALK(ING):
  Expression: #:MF211
  Context: (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                    #:MF211)
  Parent: (LET* ((#:MF211 SB-PCL::MF)
                 (#:NEW210
                  (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                              '(:ARG-INFO #))))
            (FUNCALL #'(SETF SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN) #:NEW210
                     #:MF211))
  Depth: 7
WALK(ING):
  Expression: SB-PCL::MF
  Context: (LET* ((SB-PCL::FMF
                   (SB-INT:NAMED-LAMBDA (SB-PCL::FAST-METHOD PROCESS-DATA
                                         :AFTER #)
                       (SB-PCL::.PV. SB-PCL::.NEXT-METHOD-CALL. DATA &KEY #
                        &ALLOW-OTHER-KEYS)
                     (DECLARE #
                              #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (DECLARE #)
                     (SYMBOL-MACROLET #
                       #)))
                  (SB-PCL::MF (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
             (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                     (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION SB-PCL::FMF
                                                                 '(:ARG-INFO
                                                                   #)))
             SB-PCL::MF)
  Parent: (LIST* :FUNCTION
                 (LET* ((SB-PCL::FMF
                         (SB-INT:NAMED-LAMBDA #
                             #
                           #
                           #
                           #
                           #
                           #
                           #
                           #))
                        (SB-PCL::MF
                         (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                   (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                           (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                            SB-PCL::FMF '#))
                   SB-PCL::MF)
                 '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                   SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Depth: 5
WALK(ING):
  Expression: '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                SB-PCL::SIMPLE-NEXT-METHOD-CALL T)
  Context: (LIST* :FUNCTION
                  (LET* ((SB-PCL::FMF
                          (SB-INT:NAMED-LAMBDA #
                              #
                            #
                            #
                            #
                            #
                            #
                            #
                            #))
                         (SB-PCL::MF
                          (SB-PCL::%MAKE-METHOD-FUNCTION SB-PCL::FMF)))
                    (SETF (SB-KERNEL:%FUNCALLABLE-INSTANCE-FUN SB-PCL::MF)
                            (SB-PCL::METHOD-FUNCTION-FROM-FAST-FUNCTION
                             SB-PCL::FMF '#))
                    SB-PCL::MF)
                  '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                    SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                   (LIST (FIND-CLASS 'STRING))
                                   '(DATA &KEY (LOG-LEVEL :INFO))
                                   (LIST* :FUNCTION
                                          (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                            (SETF # #)
                                            SB-PCL::MF)
                                          '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                            SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                   (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:EXECUTE)
            (SB-PCL::%DEFMETHOD-EXPANDER PROCESS-DATA (:AFTER)
                                         ((DATA STRING) &KEY (LOG-LEVEL :INFO))
                                         ((WHEN (EQ LOG-LEVEL :INFO)
                                            (FORMAT NIL "LOG: ~A" DATA)))))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-PCL::LOAD-DEFMETHOD 'STANDARD-METHOD 'PROCESS-DATA '(:AFTER)
                                  (LIST (FIND-CLASS 'STRING))
                                  '(DATA &KEY (LOG-LEVEL :INFO))
                                  (LIST* :FUNCTION
                                         (LET* ((SB-PCL::FMF #) (SB-PCL::MF #))
                                           (SETF # #)
                                           SB-PCL::MF)
                                         '(SB-PCL::PLIST (:ARG-INFO (1 . T))
                                           SB-PCL::SIMPLE-NEXT-METHOD-CALL T))
                                  (SB-C:SOURCE-LOCATION))
  Depth: 4

-------------------------------
WALK(ING):
  Expression: (DEFMACRO DEFMACRO-NAME () 0)
  Context: (DEFMACRO DEFMACRO-NAME () 0)
  Parent: (DEFMACRO DEFMACRO-NAME () 0)
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
               (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                 (SB-C::%DEFMACRO 'DEFMACRO-NAME
                                  (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                        DEFMACRO-NAME)
                                      (#:EXPR #:ENV)
                                    (DECLARE #)
                                    (DECLARE #)
                                    (SB-INT:NAMED-DS-BIND #
                                        NIL
                                        #
                                      #
                                      #))
                                  (SB-C:SOURCE-LOCATION))))
  Context: (DEFMACRO DEFMACRO-NAME () 0)
  Parent: (DEFMACRO DEFMACRO-NAME () 0)
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-C::%DEFMACRO 'DEFMACRO-NAME
                               (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                     DEFMACRO-NAME)
                                   (#:EXPR #:ENV)
                                 (DECLARE #)
                                 (DECLARE #)
                                 (SB-INT:NAMED-DS-BIND #
                                     NIL
                                     #
                                   #
                                   #))
                               (SB-C:SOURCE-LOCATION))))
  Parent: (DEFMACRO DEFMACRO-NAME () 0)
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-C::%DEFMACRO 'DEFMACRO-NAME
                               (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                     DEFMACRO-NAME)
                                   (#:EXPR #:ENV)
                                 (DECLARE #)
                                 (DECLARE #)
                                 (SB-INT:NAMED-DS-BIND #
                                     NIL
                                     #
                                   #
                                   #))
                               (SB-C:SOURCE-LOCATION))))
  Parent: (DEFMACRO DEFMACRO-NAME () 0)
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE #)
                                (DECLARE #)
                                (SB-INT:NAMED-DS-BIND #
                                    NIL
                                    #
                                  #
                                  #))
                              (SB-C:SOURCE-LOCATION))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE #)
                                (DECLARE #)
                                (SB-INT:NAMED-DS-BIND #
                                    NIL
                                    #
                                  #
                                  #))
                              (SB-C:SOURCE-LOCATION))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Depth: 3
WALK(ING):
  Expression: (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE #)
                                (DECLARE #)
                                (SB-INT:NAMED-DS-BIND #
                                    NIL
                                    #
                                  #
                                  #))
                              (SB-C:SOURCE-LOCATION))))
  Depth: 2
WALK(ING):
  Expression: SB-C::%COMPILER-DEFMACRO
  Context: (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Depth: 3
WALK(ING):
  Expression: :MACRO-FUNCTION
  Context: (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Depth: 3
WALK(ING):
  Expression: 'DEFMACRO-NAME
  Context: (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'DEFMACRO-NAME
  Parent: (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME)
  Depth: 4
WALK(ING):
  Expression: DEFMACRO-NAME
  Context: 'DEFMACRO-NAME
  Parent: (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME)
  Depth: 4
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SB-C::%DEFMACRO 'DEFMACRO-NAME
                                 (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                       DEFMACRO-NAME)
                                     (#:EXPR #:ENV)
                                   (DECLARE (SB-C::LAMBDA-LIST NIL))
                                   (DECLARE (IGNORE #:ENV))
                                   (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                          . DEFMACRO)
                                       NIL
                                       (CDR #:EXPR)
                                     (DECLARE #)
                                     (BLOCK DEFMACRO-NAME 0)))
                                 (SB-C:SOURCE-LOCATION)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
            (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
              (SB-C::%DEFMACRO 'DEFMACRO-NAME
                               (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                     DEFMACRO-NAME)
                                   (#:EXPR #:ENV)
                                 (DECLARE #)
                                 (DECLARE #)
                                 (SB-INT:NAMED-DS-BIND #
                                     NIL
                                     #
                                   #
                                   #))
                               (SB-C:SOURCE-LOCATION))))
  Parent: (DEFMACRO DEFMACRO-NAME () 0)
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE (SB-C::LAMBDA-LIST NIL))
                                (DECLARE (IGNORE #:ENV))
                                (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                       . DEFMACRO)
                                    NIL
                                    (CDR #:EXPR)
                                  (DECLARE #)
                                  (BLOCK DEFMACRO-NAME 0)))
                              (SB-C:SOURCE-LOCATION)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE #)
                                (DECLARE #)
                                (SB-INT:NAMED-DS-BIND #
                                    NIL
                                    #
                                  #
                                  #))
                              (SB-C:SOURCE-LOCATION))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE (SB-C::LAMBDA-LIST NIL))
                                (DECLARE (IGNORE #:ENV))
                                (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                       . DEFMACRO)
                                    NIL
                                    (CDR #:EXPR)
                                  (DECLARE #)
                                  (BLOCK DEFMACRO-NAME 0)))
                              (SB-C:SOURCE-LOCATION)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE #)
                                (DECLARE #)
                                (SB-INT:NAMED-DS-BIND #
                                    NIL
                                    #
                                  #
                                  #))
                              (SB-C:SOURCE-LOCATION))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                               (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                     DEFMACRO-NAME)
                                   (#:EXPR #:ENV)
                                 (DECLARE (SB-C::LAMBDA-LIST NIL))
                                 (DECLARE (IGNORE #:ENV))
                                 (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                        . DEFMACRO)
                                     NIL
                                     (CDR #:EXPR)
                                   (DECLARE (SB-C::CONSTANT-VALUE))
                                   (BLOCK DEFMACRO-NAME 0)))
                               (SB-C:SOURCE-LOCATION))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE (SB-C::LAMBDA-LIST NIL))
                                (DECLARE (IGNORE #:ENV))
                                (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                       . DEFMACRO)
                                    NIL
                                    (CDR #:EXPR)
                                  (DECLARE #)
                                  (BLOCK DEFMACRO-NAME 0)))
                              (SB-C:SOURCE-LOCATION)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C::%COMPILER-DEFMACRO :MACRO-FUNCTION 'DEFMACRO-NAME))
           (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SB-C::%DEFMACRO 'DEFMACRO-NAME
                              (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION
                                                    DEFMACRO-NAME)
                                  (#:EXPR #:ENV)
                                (DECLARE #)
                                (DECLARE #)
                                (SB-INT:NAMED-DS-BIND #
                                    NIL
                                    #
                                  #
                                  #))
                              (SB-C:SOURCE-LOCATION))))
  Depth: 2
WALK(ING):
  Expression: SB-C::%DEFMACRO
  Context: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                            (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                (#:EXPR #:ENV)
                              (DECLARE (SB-C::LAMBDA-LIST NIL))
                              (DECLARE (IGNORE #:ENV))
                              (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                     . DEFMACRO)
                                  NIL
                                  (CDR #:EXPR)
                                (DECLARE (SB-C::CONSTANT-VALUE))
                                (BLOCK DEFMACRO-NAME 0)))
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: 'DEFMACRO-NAME
  Context: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                            (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                (#:EXPR #:ENV)
                              (DECLARE (SB-C::LAMBDA-LIST NIL))
                              (DECLARE (IGNORE #:ENV))
                              (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                     . DEFMACRO)
                                  NIL
                                  (CDR #:EXPR)
                                (DECLARE (SB-C::CONSTANT-VALUE))
                                (BLOCK DEFMACRO-NAME 0)))
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'DEFMACRO-NAME
  Parent: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                           (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                               (#:EXPR #:ENV)
                             (DECLARE (SB-C::LAMBDA-LIST NIL))
                             (DECLARE (IGNORE #:ENV))
                             (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                    . DEFMACRO)
                                 NIL
                                 (CDR #:EXPR)
                               (DECLARE (SB-C::CONSTANT-VALUE))
                               (BLOCK DEFMACRO-NAME 0)))
                           (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: DEFMACRO-NAME
  Context: 'DEFMACRO-NAME
  Parent: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                           (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                               (#:EXPR #:ENV)
                             (DECLARE (SB-C::LAMBDA-LIST NIL))
                             (DECLARE (IGNORE #:ENV))
                             (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                    . DEFMACRO)
                                 NIL
                                 (CDR #:EXPR)
                               (DECLARE (SB-C::CONSTANT-VALUE))
                               (BLOCK DEFMACRO-NAME 0)))
                           (SB-C:SOURCE-LOCATION))
  Depth: 4
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                  (#:EXPR #:ENV)
                (DECLARE (SB-C::LAMBDA-LIST NIL))
                (DECLARE (IGNORE #:ENV))
                (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME . DEFMACRO)
                    NIL
                    (CDR #:EXPR)
                  (DECLARE (SB-C::CONSTANT-VALUE))
                  (BLOCK DEFMACRO-NAME 0)))
  Context: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                            (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                (#:EXPR #:ENV)
                              (DECLARE (SB-C::LAMBDA-LIST NIL))
                              (DECLARE (IGNORE #:ENV))
                              (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                     . DEFMACRO)
                                  NIL
                                  (CDR #:EXPR)
                                (DECLARE (SB-C::CONSTANT-VALUE))
                                (BLOCK DEFMACRO-NAME 0)))
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                    (#:EXPR #:ENV)
                  (DECLARE (SB-C::LAMBDA-LIST NIL))
                  (DECLARE (IGNORE #:ENV))
                  (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME . DEFMACRO)
                      NIL
                      (CDR #:EXPR)
                    (DECLARE (SB-C::CONSTANT-VALUE))
                    (BLOCK DEFMACRO-NAME 0)))
  Context: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                            (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                (#:EXPR #:ENV)
                              (DECLARE (SB-C::LAMBDA-LIST NIL))
                              (DECLARE (IGNORE #:ENV))
                              (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                     . DEFMACRO)
                                  NIL
                                  (CDR #:EXPR)
                                (DECLARE (SB-C::CONSTANT-VALUE))
                                (BLOCK DEFMACRO-NAME 0)))
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                            (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                (#:EXPR #:ENV)
                              (DECLARE (SB-C::LAMBDA-LIST NIL))
                              (DECLARE (IGNORE #:ENV))
                              (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                     . DEFMACRO)
                                  NIL
                                  (CDR #:EXPR)
                                (DECLARE (SB-C::CONSTANT-VALUE))
                                (BLOCK DEFMACRO-NAME 0)))
                            (SB-C:SOURCE-LOCATION))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SB-C::%DEFMACRO 'DEFMACRO-NAME
                             (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                                 (#:EXPR #:ENV)
                               (DECLARE (SB-C::LAMBDA-LIST NIL))
                               (DECLARE (IGNORE #:ENV))
                               (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                      . DEFMACRO)
                                   NIL
                                   (CDR #:EXPR)
                                 (DECLARE #)
                                 (BLOCK DEFMACRO-NAME 0)))
                             (SB-C:SOURCE-LOCATION)))
  Depth: 3
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-C::%DEFMACRO 'DEFMACRO-NAME
                           (SB-INT:NAMED-LAMBDA (MACRO-FUNCTION DEFMACRO-NAME)
                               (#:EXPR #:ENV)
                             (DECLARE (SB-C::LAMBDA-LIST NIL))
                             (DECLARE (IGNORE #:ENV))
                             (SB-INT:NAMED-DS-BIND (:MACRO DEFMACRO-NAME
                                                    . DEFMACRO)
                                 NIL
                                 (CDR #:EXPR)
                               (DECLARE (SB-C::CONSTANT-VALUE))
                               (BLOCK DEFMACRO-NAME 0)))
                           (SB-C:SOURCE-LOCATION))
  Depth: 4

-------------------------------
WALK(ING):
  Expression: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                      (LAMBDA (FORM ENV) FORM ENV 0))
  Context: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                   (LAMBDA (FORM ENV) FORM ENV 0))
  Parent: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                  (LAMBDA (FORM ENV) FORM ENV 0))
  Depth: 0
WALK(ING):
  Expression: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
                (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Context: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                   (LAMBDA (FORM ENV) FORM ENV 0))
  Parent: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                  (LAMBDA (FORM ENV) FORM ENV 0))
  Depth: 0
WALK(ING):
  Expression: LET*
  Context: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
             (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Parent: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                  (LAMBDA (FORM ENV) FORM ENV 0))
  Depth: 1
WALK(ING):
  Expression: ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
  Context: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
             (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Parent: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                  (LAMBDA (FORM ENV) FORM ENV 0))
  Depth: 1
WALK(ING):
  Expression: (#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0))
  Context: ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
  Parent: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
            (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #:NEW212
  Context: (#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0))
  Parent: ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
  Depth: 3
WALK(ING):
  Expression: (LAMBDA (FORM ENV) FORM ENV 0)
  Context: (#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0))
  Parent: ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
  Depth: 3
WALK(ING):
  Expression: #'(LAMBDA (FORM ENV) FORM ENV 0)
  Context: (#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0))
  Parent: ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
  Depth: 3
WALK(ING):
  Expression: (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME)
  Context: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
             (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Parent: (SETF (MACRO-FUNCTION 'MACRO-FUNCTION-NAME)
                  (LAMBDA (FORM ENV) FORM ENV 0))
  Depth: 1
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME)
  Parent: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
            (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #'(SETF MACRO-FUNCTION)
  Context: (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME)
  Parent: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
            (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: #:NEW212
  Context: (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME)
  Parent: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
            (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: 'MACRO-FUNCTION-NAME
  Context: (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME)
  Parent: (LET* ((#:NEW212 (LAMBDA (FORM ENV) FORM ENV 0)))
            (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'MACRO-FUNCTION-NAME
  Parent: (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME)
  Depth: 3
WALK(ING):
  Expression: MACRO-FUNCTION-NAME
  Context: 'MACRO-FUNCTION-NAME
  Parent: (FUNCALL #'(SETF MACRO-FUNCTION) #:NEW212 'MACRO-FUNCTION-NAME)
  Depth: 3

-------------------------------
WALK(ING):
  Expression: (DEFINE-CONDITION CONDITION-NAME
                  NIL
                  NIL)
  Context: (DEFINE-CONDITION CONDITION-NAME
               NIL
               NIL)
  Parent: (DEFINE-CONDITION CONDITION-NAME
              NIL
              NIL)
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                             (SB-KERNEL::FIND-CONDITION-LAYOUT
                                              'CONDITION-NAME '(CONDITION))
                                             (LIST) (LIST) 'NIL 'NIL
                                             (SB-C:SOURCE-LOCATION))
               (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
               'CONDITION-NAME)
  Context: (DEFINE-CONDITION CONDITION-NAME
               NIL
               NIL)
  Parent: (DEFINE-CONDITION CONDITION-NAME
              NIL
              NIL)
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                          (SB-KERNEL::FIND-CONDITION-LAYOUT
                                           'CONDITION-NAME '(CONDITION))
                                          (LIST) (LIST) 'NIL 'NIL
                                          (SB-C:SOURCE-LOCATION))
            (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
            'CONDITION-NAME)
  Parent: (DEFINE-CONDITION CONDITION-NAME
              NIL
              NIL)
  Depth: 1
WALK(ING):
  Expression: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                            (SB-KERNEL::FIND-CONDITION-LAYOUT
                                             'CONDITION-NAME '(CONDITION))
                                            (LIST) (LIST) 'NIL 'NIL
                                            (SB-C:SOURCE-LOCATION))
  Context: (PROGN
            (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                          (SB-KERNEL::FIND-CONDITION-LAYOUT
                                           'CONDITION-NAME '(CONDITION))
                                          (LIST) (LIST) 'NIL 'NIL
                                          (SB-C:SOURCE-LOCATION))
            (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
            'CONDITION-NAME)
  Parent: (DEFINE-CONDITION CONDITION-NAME
              NIL
              NIL)
  Depth: 1
WALK(ING):
  Expression: SB-KERNEL::%DEFINE-CONDITION
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: 'CONDITION-NAME
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'CONDITION-NAME
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: CONDITION-NAME
  Context: 'CONDITION-NAME
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: '(CONDITION)
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: (SB-KERNEL::FIND-CONDITION-LAYOUT 'CONDITION-NAME '(CONDITION))
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: SB-KERNEL::FIND-CONDITION-LAYOUT
  Context: (SB-KERNEL::FIND-CONDITION-LAYOUT 'CONDITION-NAME '(CONDITION))
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: 'CONDITION-NAME
  Context: (SB-KERNEL::FIND-CONDITION-LAYOUT 'CONDITION-NAME '(CONDITION))
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'CONDITION-NAME
  Parent: (SB-KERNEL::FIND-CONDITION-LAYOUT 'CONDITION-NAME '(CONDITION))
  Depth: 4
WALK(ING):
  Expression: CONDITION-NAME
  Context: 'CONDITION-NAME
  Parent: (SB-KERNEL::FIND-CONDITION-LAYOUT 'CONDITION-NAME '(CONDITION))
  Depth: 4
WALK(ING):
  Expression: '(CONDITION)
  Context: (SB-KERNEL::FIND-CONDITION-LAYOUT 'CONDITION-NAME '(CONDITION))
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: (LIST)
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: LIST
  Context: (LIST)
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: (LIST)
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: LIST
  Context: (LIST)
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: 'NIL
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'NIL
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: 'NIL
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: (SB-C:SOURCE-LOCATION)
  Context: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: SB-C:SOURCE-LOCATION
  Context: (SB-C:SOURCE-LOCATION)
  Parent: (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                        (SB-KERNEL::FIND-CONDITION-LAYOUT
                                         'CONDITION-NAME '(CONDITION))
                                        (LIST) (LIST) 'NIL 'NIL
                                        (SB-C:SOURCE-LOCATION))
  Depth: 3
WALK(ING):
  Expression: (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
  Context: (PROGN
            (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                          (SB-KERNEL::FIND-CONDITION-LAYOUT
                                           'CONDITION-NAME '(CONDITION))
                                          (LIST) (LIST) 'NIL 'NIL
                                          (SB-C:SOURCE-LOCATION))
            (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
            'CONDITION-NAME)
  Parent: (DEFINE-CONDITION CONDITION-NAME
              NIL
              NIL)
  Depth: 1
WALK(ING):
  Expression: SB-KERNEL::%SET-CONDITION-REPORT
  Context: (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: 'CONDITION-NAME
  Context: (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'CONDITION-NAME
  Parent: (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
  Depth: 3
WALK(ING):
  Expression: CONDITION-NAME
  Context: 'CONDITION-NAME
  Parent: (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: 'CONDITION-NAME
  Context: (PROGN
            (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                          (SB-KERNEL::FIND-CONDITION-LAYOUT
                                           'CONDITION-NAME '(CONDITION))
                                          (LIST) (LIST) 'NIL 'NIL
                                          (SB-C:SOURCE-LOCATION))
            (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
            'CONDITION-NAME)
  Parent: (DEFINE-CONDITION CONDITION-NAME
              NIL
              NIL)
  Depth: 1
WALK(ING):
  Expression: QUOTE
  Context: 'CONDITION-NAME
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2
WALK(ING):
  Expression: CONDITION-NAME
  Context: 'CONDITION-NAME
  Parent: (PROGN
           (SB-KERNEL::%DEFINE-CONDITION 'CONDITION-NAME '(CONDITION)
                                         (SB-KERNEL::FIND-CONDITION-LAYOUT
                                          'CONDITION-NAME '(CONDITION))
                                         (LIST) (LIST) 'NIL 'NIL
                                         (SB-C:SOURCE-LOCATION))
           (SB-KERNEL::%SET-CONDITION-REPORT 'CONDITION-NAME NIL)
           'CONDITION-NAME)
  Depth: 2


Definitions Analysis Trace for d:/quicklisp/local-projects/test-project/source/single-pkg-refs.lisp

-------------------------------
WALK(ING):
  Expression: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Context: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 0
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
                (SETQ *PACKAGE*
                        (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                         "USER-MAIN-PACKAGE")))
  Context: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 0
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SETQ *PACKAGE*
                     (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                      "USER-MAIN-PACKAGE")))
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 1
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SETQ *PACKAGE*
                     (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                      "USER-MAIN-PACKAGE")))
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 1
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: :LOAD-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: :EXECUTE
  Context: (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: (SETQ *PACKAGE*
                      (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                       "USER-MAIN-PACKAGE"))
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
             (SETQ *PACKAGE*
                     (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                      "USER-MAIN-PACKAGE")))
  Parent: (IN-PACKAGE #:USER-MAIN-PACKAGE)
  Depth: 1
WALK(ING):
  Expression: SETQ
  Context: (SETQ *PACKAGE*
                   (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: *PACKAGE*
  Context: (SETQ *PACKAGE*
                   (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE")
  Context: (SETQ *PACKAGE*
                   (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
            (SETQ *PACKAGE*
                    (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
                     "USER-MAIN-PACKAGE")))
  Depth: 2
WALK(ING):
  Expression: SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE
  Context: (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE")
  Parent: (SETQ *PACKAGE*
                  (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Depth: 3
WALK(ING):
  Expression: "USER-MAIN-PACKAGE"
  Context: (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE")
  Parent: (SETQ *PACKAGE*
                  (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "USER-MAIN-PACKAGE"))
  Depth: 3





-------------------------------
WALK(ING):
  Expression: (DEFUN-NAME)
  Context: (DEFUN-NAME)
  Parent: (DEFUN-NAME)
  Depth: 0
WALK(ING):
  Expression: DEFUN-NAME
  Context: (DEFUN-NAME)
  Parent: (DEFUN-NAME)
  Depth: 1

-------------------------------
WALK(ING):
  Expression: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Context: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Parent: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Depth: 0
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Parent: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Depth: 1
WALK(ING):
  Expression: 'SYMBOL-FUNCTION-NAME
  Context: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Parent: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Depth: 1
WALK(ING):
  Expression: QUOTE
  Context: 'SYMBOL-FUNCTION-NAME
  Parent: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Depth: 2
WALK(ING):
  Expression: SYMBOL-FUNCTION-NAME
  Context: 'SYMBOL-FUNCTION-NAME
  Parent: (FUNCALL 'SYMBOL-FUNCTION-NAME)
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Context: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Parent: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Depth: 0
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Parent: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Depth: 1
WALK(ING):
  Expression: 'FDEFINITION-FUNCTION-NAME
  Context: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Parent: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Depth: 1
WALK(ING):
  Expression: QUOTE
  Context: 'FDEFINITION-FUNCTION-NAME
  Parent: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Depth: 2
WALK(ING):
  Expression: FDEFINITION-FUNCTION-NAME
  Context: 'FDEFINITION-FUNCTION-NAME
  Parent: (FUNCALL 'FDEFINITION-FUNCTION-NAME)
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Context: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Parent: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Depth: 0
WALK(ING):
  Expression: CIRCLE-RADIUS
  Context: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Parent: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Depth: 1
WALK(ING):
  Expression: (MAKE-CIRCLE)
  Context: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Parent: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Depth: 1
WALK(ING):
  Expression: MAKE-CIRCLE
  Context: (MAKE-CIRCLE)
  Parent: (CIRCLE-RADIUS (MAKE-CIRCLE))
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (PERSON.AGE (MAKE-PERSON))
  Context: (PERSON.AGE (MAKE-PERSON))
  Parent: (PERSON.AGE (MAKE-PERSON))
  Depth: 0
WALK(ING):
  Expression: PERSON.AGE
  Context: (PERSON.AGE (MAKE-PERSON))
  Parent: (PERSON.AGE (MAKE-PERSON))
  Depth: 1
WALK(ING):
  Expression: (MAKE-PERSON)
  Context: (PERSON.AGE (MAKE-PERSON))
  Parent: (PERSON.AGE (MAKE-PERSON))
  Depth: 1
WALK(ING):
  Expression: MAKE-PERSON
  Context: (MAKE-PERSON)
  Parent: (PERSON.AGE (MAKE-PERSON))
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Context: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Parent: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Depth: 0
WALK(ING):
  Expression: FUNCALL
  Context: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Parent: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Depth: 1
WALK(ING):
  Expression: #'COMPUTE-AREA
  Context: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Parent: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Depth: 1
WALK(ING):
  Expression: (MAKE-CIRCLE :RADIUS 1)
  Context: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Parent: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Depth: 1
WALK(ING):
  Expression: MAKE-CIRCLE
  Context: (MAKE-CIRCLE :RADIUS 1)
  Parent: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Depth: 2
WALK(ING):
  Expression: :RADIUS
  Context: (MAKE-CIRCLE :RADIUS 1)
  Parent: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Depth: 2
WALK(ING):
  Expression: 1
  Context: (MAKE-CIRCLE :RADIUS 1)
  Parent: (FUNCALL #'COMPUTE-AREA (MAKE-CIRCLE :RADIUS 1))
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Context: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Parent: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Depth: 0
WALK(ING):
  Expression: PROCESS-DATA
  Context: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Parent: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Depth: 1
WALK(ING):
  Expression: "test"
  Context: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Parent: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Depth: 1
WALK(ING):
  Expression: :LOG-LEVEL
  Context: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Parent: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Depth: 1
WALK(ING):
  Expression: :WARN
  Context: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Parent: (PROCESS-DATA "test" :LOG-LEVEL :WARN)
  Depth: 1

-------------------------------
WALK(ING):
  Expression: (PROCESS-DATA 42)
  Context: (PROCESS-DATA 42)
  Parent: (PROCESS-DATA 42)
  Depth: 0
WALK(ING):
  Expression: PROCESS-DATA
  Context: (PROCESS-DATA 42)
  Parent: (PROCESS-DATA 42)
  Depth: 1
WALK(ING):
  Expression: 42
  Context: (PROCESS-DATA 42)
  Parent: (PROCESS-DATA 42)
  Depth: 1

-------------------------------
WALK(ING):
  Expression: (DEFMACRO-NAME)
  Context: (DEFMACRO-NAME)
  Parent: (DEFMACRO-NAME)
  Depth: 0
WALK(ING):
  Expression: 0
  Context: (DEFMACRO-NAME)
  Parent: (DEFMACRO-NAME)
  Depth: 0

-------------------------------
WALK(ING):
  Expression: (MACRO-FUNCTION-NAME)
  Context: (MACRO-FUNCTION-NAME)
  Parent: (MACRO-FUNCTION-NAME)
  Depth: 0
WALK(ING):
  Expression: 0
  Context: (MACRO-FUNCTION-NAME)
  Parent: (MACRO-FUNCTION-NAME)
  Depth: 0

-------------------------------
WALK(ING):
  Expression: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Context: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Parent: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
               (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                                (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                    NIL
                                  (BLOCK FUNCTION-WITH-CONDITION
                                    (ERROR 'CONDITION-NAME)))))
  Context: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Parent: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
            (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                             (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                 NIL
                               (BLOCK FUNCTION-WITH-CONDITION
                                 (ERROR 'CONDITION-NAME)))))
  Parent: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
            (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                             (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                 NIL
                               (BLOCK FUNCTION-WITH-CONDITION
                                 (ERROR 'CONDITION-NAME)))))
  Parent: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
           (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME)))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
           (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME)))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
           (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME)))))
  Depth: 2
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: 'FUNCTION-WITH-CONDITION
  Context: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'FUNCTION-WITH-CONDITION
  Parent: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Depth: 4
WALK(ING):
  Expression: FUNCTION-WITH-CONDITION
  Context: 'FUNCTION-WITH-CONDITION
  Parent: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Depth: 4
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                               (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                   NIL
                                 (BLOCK FUNCTION-WITH-CONDITION
                                   (ERROR 'CONDITION-NAME))))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
            (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                             (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                 NIL
                               (BLOCK FUNCTION-WITH-CONDITION
                                 (ERROR 'CONDITION-NAME)))))
  Parent: (DEFUN FUNCTION-WITH-CONDITION () (ERROR 'CONDITION-NAME))
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
           (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME)))))
  Depth: 2
WALK(ING):
  Expression: 'FUNCTION-WITH-CONDITION
  Context: (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
           (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME)))))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'FUNCTION-WITH-CONDITION
  Parent: (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                           (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                               NIL
                             (BLOCK FUNCTION-WITH-CONDITION
                               (ERROR 'CONDITION-NAME))))
  Depth: 3
WALK(ING):
  Expression: FUNCTION-WITH-CONDITION
  Context: 'FUNCTION-WITH-CONDITION
  Parent: (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                           (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                               NIL
                             (BLOCK FUNCTION-WITH-CONDITION
                               (ERROR 'CONDITION-NAME))))
  Depth: 3
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                  NIL
                (BLOCK FUNCTION-WITH-CONDITION (ERROR 'CONDITION-NAME)))
  Context: (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
           (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME)))))
  Depth: 2
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                    NIL
                  (BLOCK FUNCTION-WITH-CONDITION (ERROR 'CONDITION-NAME)))
  Context: (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME))))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'FUNCTION-WITH-CONDITION T NIL NIL))
           (SB-IMPL::%DEFUN 'FUNCTION-WITH-CONDITION
                            (SB-INT:NAMED-LAMBDA FUNCTION-WITH-CONDITION
                                NIL
                              (BLOCK FUNCTION-WITH-CONDITION
                                (ERROR 'CONDITION-NAME)))))
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Context: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Parent: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Depth: 0
WALK(ING):
  Expression: (PROGN
               (EVAL-WHEN (:COMPILE-TOPLEVEL)
                 (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
               (SB-IMPL::%DEFUN 'MY-FUNCTION
                                (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                    (ARG)
                                  (BLOCK MY-FUNCTION
                                    (DEFUN-NAME)
                                    *DEFVAR-VARIABLE*
                                    ARG))))
  Context: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Parent: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Depth: 0
WALK(ING):
  Expression: PROGN
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
            (SB-IMPL::%DEFUN 'MY-FUNCTION
                             (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                 (ARG)
                               (BLOCK MY-FUNCTION
                                 (DEFUN-NAME)
                                 *DEFVAR-VARIABLE*
                                 ARG))))
  Parent: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Depth: 1
WALK(ING):
  Expression: (EVAL-WHEN (:COMPILE-TOPLEVEL)
                (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
            (SB-IMPL::%DEFUN 'MY-FUNCTION
                             (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                 (ARG)
                               (BLOCK MY-FUNCTION
                                 (DEFUN-NAME)
                                 *DEFVAR-VARIABLE*
                                 ARG))))
  Parent: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Depth: 1
WALK(ING):
  Expression: EVAL-WHEN
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
           (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG))))
  Depth: 2
WALK(ING):
  Expression: (:COMPILE-TOPLEVEL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
           (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG))))
  Depth: 2
WALK(ING):
  Expression: :COMPILE-TOPLEVEL
  Context: (:COMPILE-TOPLEVEL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Context: (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
           (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG))))
  Depth: 2
WALK(ING):
  Expression: SB-C:%COMPILER-DEFUN
  Context: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: 'MY-FUNCTION
  Context: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: QUOTE
  Context: 'MY-FUNCTION
  Parent: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Depth: 4
WALK(ING):
  Expression: MY-FUNCTION
  Context: 'MY-FUNCTION
  Parent: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Depth: 4
WALK(ING):
  Expression: T
  Context: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: NIL
  Context: (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL)
  Parent: (EVAL-WHEN (:COMPILE-TOPLEVEL)
            (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
  Depth: 3
WALK(ING):
  Expression: (SB-IMPL::%DEFUN 'MY-FUNCTION
                               (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                   (ARG)
                                 (BLOCK MY-FUNCTION
                                   (DEFUN-NAME)
                                   *DEFVAR-VARIABLE*
                                   ARG)))
  Context: (PROGN
            (EVAL-WHEN (:COMPILE-TOPLEVEL)
              (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
            (SB-IMPL::%DEFUN 'MY-FUNCTION
                             (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                 (ARG)
                               (BLOCK MY-FUNCTION
                                 (DEFUN-NAME)
                                 *DEFVAR-VARIABLE*
                                 ARG))))
  Parent: (DEFUN MY-FUNCTION (ARG) (DEFUN-NAME) *DEFVAR-VARIABLE* ARG)
  Depth: 1
WALK(ING):
  Expression: SB-IMPL::%DEFUN
  Context: (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
           (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG))))
  Depth: 2
WALK(ING):
  Expression: 'MY-FUNCTION
  Context: (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
           (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG))))
  Depth: 2
WALK(ING):
  Expression: QUOTE
  Context: 'MY-FUNCTION
  Parent: (SB-IMPL::%DEFUN 'MY-FUNCTION
                           (SB-INT:NAMED-LAMBDA MY-FUNCTION
                               (ARG)
                             (BLOCK MY-FUNCTION
                               (DEFUN-NAME)
                               *DEFVAR-VARIABLE*
                               ARG)))
  Depth: 3
WALK(ING):
  Expression: MY-FUNCTION
  Context: 'MY-FUNCTION
  Parent: (SB-IMPL::%DEFUN 'MY-FUNCTION
                           (SB-INT:NAMED-LAMBDA MY-FUNCTION
                               (ARG)
                             (BLOCK MY-FUNCTION
                               (DEFUN-NAME)
                               *DEFVAR-VARIABLE*
                               ARG)))
  Depth: 3
WALK(ING):
  Expression: (SB-INT:NAMED-LAMBDA MY-FUNCTION
                  (ARG)
                (BLOCK MY-FUNCTION (DEFUN-NAME) *DEFVAR-VARIABLE* ARG))
  Context: (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
           (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG))))
  Depth: 2
WALK(ING):
  Expression: #'(SB-INT:NAMED-LAMBDA MY-FUNCTION
                    (ARG)
                  (BLOCK MY-FUNCTION (DEFUN-NAME) *DEFVAR-VARIABLE* ARG))
  Context: (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG)))
  Parent: (PROGN
           (EVAL-WHEN (:COMPILE-TOPLEVEL)
             (SB-C:%COMPILER-DEFUN 'MY-FUNCTION T NIL NIL))
           (SB-IMPL::%DEFUN 'MY-FUNCTION
                            (SB-INT:NAMED-LAMBDA MY-FUNCTION
                                (ARG)
                              (BLOCK MY-FUNCTION
                                (DEFUN-NAME)
                                *DEFVAR-VARIABLE*
                                ARG))))
  Depth: 2

-------------------------------
WALK(ING):
  Expression: (LET ((ARG 0))
                (DEFUN-NAME)
                *DEFVAR-VARIABLE*
                (COMPUTE-AREA (MAKE-CIRCLE))
                ARG)
  Context: (LET ((ARG 0))
             (DEFUN-NAME)
             *DEFVAR-VARIABLE*
             (COMPUTE-AREA (MAKE-CIRCLE))
             ARG)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 0
WALK(ING):
  Expression: LET
  Context: (LET ((ARG 0))
             (DEFUN-NAME)
             *DEFVAR-VARIABLE*
             (COMPUTE-AREA (MAKE-CIRCLE))
             ARG)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 1
WALK(ING):
  Expression: ((ARG 0))
  Context: (LET ((ARG 0))
             (DEFUN-NAME)
             *DEFVAR-VARIABLE*
             (COMPUTE-AREA (MAKE-CIRCLE))
             ARG)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 1
WALK(ING):
  Expression: (ARG 0)
  Context: ((ARG 0))
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 2
WALK(ING):
  Expression: ARG
  Context: (ARG 0)
  Parent: ((ARG 0))
  Depth: 3
WALK(ING):
  Expression: 0
  Context: (ARG 0)
  Parent: ((ARG 0))
  Depth: 3
WALK(ING):
  Expression: (DEFUN-NAME)
  Context: (LET ((ARG 0))
             (DEFUN-NAME)
             *DEFVAR-VARIABLE*
             (COMPUTE-AREA (MAKE-CIRCLE))
             ARG)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 1
WALK(ING):
  Expression: DEFUN-NAME
  Context: (DEFUN-NAME)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 2
WALK(ING):
  Expression: *DEFVAR-VARIABLE*
  Context: (LET ((ARG 0))
             (DEFUN-NAME)
             *DEFVAR-VARIABLE*
             (COMPUTE-AREA (MAKE-CIRCLE))
             ARG)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 1
WALK(ING):
  Expression: (COMPUTE-AREA (MAKE-CIRCLE))
  Context: (LET ((ARG 0))
             (DEFUN-NAME)
             *DEFVAR-VARIABLE*
             (COMPUTE-AREA (MAKE-CIRCLE))
             ARG)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 1
WALK(ING):
  Expression: COMPUTE-AREA
  Context: (COMPUTE-AREA (MAKE-CIRCLE))
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 2
WALK(ING):
  Expression: (MAKE-CIRCLE)
  Context: (COMPUTE-AREA (MAKE-CIRCLE))
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 2
WALK(ING):
  Expression: MAKE-CIRCLE
  Context: (MAKE-CIRCLE)
  Parent: (COMPUTE-AREA (MAKE-CIRCLE))
  Depth: 3
WALK(ING):
  Expression: ARG
  Context: (LET ((ARG 0))
             (DEFUN-NAME)
             *DEFVAR-VARIABLE*
             (COMPUTE-AREA (MAKE-CIRCLE))
             ARG)
  Parent: (LET ((ARG 0))
            (DEFUN-NAME)
            *DEFVAR-VARIABLE*
            (COMPUTE-AREA (MAKE-CIRCLE))
            ARG)
  Depth: 1

