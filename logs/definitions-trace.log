
Definitions Analysis Trace for d:/quicklisp/local-projects/test-project/src/defs.lisp

-------------------------------
WALK(ING):
  Expression: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
                (:USE :CL))
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: DEFPACKAGE
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: #:TEST-PROJECT-PACKAGE
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: (:USE :CL)
  Context: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
             (:USE :CL))
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: :USE
  Context: (:USE :CL)
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))
WALK(ING):
  Expression: :CL
  Context: (:USE :CL)
  Parent: (DEFPACKAGE #:TEST-PROJECT-PACKAGE
            (:USE :CL))

-------------------------------
WALK(ING):
  Expression: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: IN-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: #:TEST-PROJECT-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)

-------------------------------
WALK(ING):
  Expression: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
                (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
                (MAX-SIZE 100 :TYPE FIXNUM))
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: DEFSTRUCT
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (CACHE (:CONC-NAME CACHE.))
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: CACHE
  Context: (CACHE (:CONC-NAME CACHE.))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (:CONC-NAME CACHE.)
  Context: (CACHE (:CONC-NAME CACHE.))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: :CONC-NAME
  Context: (:CONC-NAME CACHE.)
  Parent: (CACHE (:CONC-NAME CACHE.))
WALK(ING):
  Expression: CACHE.
  Context: (:CONC-NAME CACHE.)
  Parent: (CACHE (:CONC-NAME CACHE.))
WALK(ING):
  Expression: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: TABLE
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (MAKE-HASH-TABLE)
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: MAKE-HASH-TABLE
  Context: (MAKE-HASH-TABLE)
  Parent: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
WALK(ING):
  Expression: :TYPE
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: HASH-TABLE
  Context: (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: (MAX-SIZE 100 :TYPE FIXNUM)
  Context: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
             (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
             (MAX-SIZE 100 :TYPE FIXNUM))
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: MAX-SIZE
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: 100
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: :TYPE
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))
WALK(ING):
  Expression: FIXNUM
  Context: (MAX-SIZE 100 :TYPE FIXNUM)
  Parent: (DEFSTRUCT (CACHE (:CONC-NAME CACHE.))
            (TABLE (MAKE-HASH-TABLE) :TYPE HASH-TABLE)
            (MAX-SIZE 100 :TYPE FIXNUM))

-------------------------------
WALK(ING):
  Expression: (DEFCLASS VECTOR2D NIL
                        ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                         (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: DEFCLASS
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: VECTOR2D
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: NIL
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
               (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
  Context: (DEFCLASS VECTOR2D NIL
                     ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                      (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Context: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
            (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: X
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITARG
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :X
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITFORM
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: 0.0
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :ACCESSOR
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: V2D-X
  Context: (X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Context: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
            (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
  Parent: (DEFCLASS VECTOR2D NIL
                    ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
                     (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)))
WALK(ING):
  Expression: Y
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITARG
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :Y
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :INITFORM
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: 0.0
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: :ACCESSOR
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))
WALK(ING):
  Expression: V2D-Y
  Context: (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y)
  Parent: ((X :INITARG :X :INITFORM 0.0 :ACCESSOR V2D-X)
           (Y :INITARG :Y :INITFORM 0.0 :ACCESSOR V2D-Y))

-------------------------------
WALK(ING):
  Expression: (DEFGENERIC MAGNITUDE
                  (VECTOR)
                (:DOCUMENTATION "Calculate vector magnitude"))
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: DEFGENERIC
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: MAGNITUDE
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: (VECTOR)
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: VECTOR
  Context: (VECTOR)
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: (:DOCUMENTATION "Calculate vector magnitude")
  Context: (DEFGENERIC MAGNITUDE
               (VECTOR)
             (:DOCUMENTATION "Calculate vector magnitude"))
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: :DOCUMENTATION
  Context: (:DOCUMENTATION "Calculate vector magnitude")
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))
WALK(ING):
  Expression: "Calculate vector magnitude"
  Context: (:DOCUMENTATION "Calculate vector magnitude")
  Parent: (DEFGENERIC MAGNITUDE
              (VECTOR)
            (:DOCUMENTATION "Calculate vector magnitude"))

-------------------------------
WALK(ING):
  Expression: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
                (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: DEFMETHOD
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: MAGNITUDE
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: ((V VECTOR2D))
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: (V VECTOR2D)
  Context: ((V VECTOR2D))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: V
  Context: (V VECTOR2D)
  Parent: ((V VECTOR2D))
WALK(ING):
  Expression: VECTOR2D
  Context: (V VECTOR2D)
  Parent: ((V VECTOR2D))
WALK(ING):
  Expression: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
  Context: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
             (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: SQRT
  Context: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Context: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
  Parent: (DEFMETHOD MAGNITUDE ((V VECTOR2D))
            (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))))
WALK(ING):
  Expression: +
  Context: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Parent: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
WALK(ING):
  Expression: (EXPT (V2D-X V) 2)
  Context: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Parent: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
WALK(ING):
  Expression: EXPT
  Context: (EXPT (V2D-X V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: (V2D-X V)
  Context: (EXPT (V2D-X V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: V2D-X
  Context: (V2D-X V)
  Parent: (EXPT (V2D-X V) 2)
WALK(ING):
  Expression: V
  Context: (V2D-X V)
  Parent: (EXPT (V2D-X V) 2)
WALK(ING):
  Expression: 2
  Context: (EXPT (V2D-X V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: (EXPT (V2D-Y V) 2)
  Context: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
  Parent: (SQRT (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2)))
WALK(ING):
  Expression: EXPT
  Context: (EXPT (V2D-Y V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: (V2D-Y V)
  Context: (EXPT (V2D-Y V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))
WALK(ING):
  Expression: V2D-Y
  Context: (V2D-Y V)
  Parent: (EXPT (V2D-Y V) 2)
WALK(ING):
  Expression: V
  Context: (V2D-Y V)
  Parent: (EXPT (V2D-Y V) 2)
WALK(ING):
  Expression: 2
  Context: (EXPT (V2D-Y V) 2)
  Parent: (+ (EXPT (V2D-X V) 2) (EXPT (V2D-Y V) 2))

-------------------------------
WALK(ING):
  Expression: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: DEFVAR
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: (MAKE-CACHE)
  Context: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))
WALK(ING):
  Expression: MAKE-CACHE
  Context: (MAKE-CACHE)
  Parent: (DEFVAR *DEFAULT-CACHE* (MAKE-CACHE))

-------------------------------
WALK(ING):
  Expression: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: DEFPARAMETER
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: *ORIGIN*
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: (MAKE-INSTANCE 'VECTOR2D)
  Context: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: MAKE-INSTANCE
  Context: (MAKE-INSTANCE 'VECTOR2D)
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))
WALK(ING):
  Expression: 'VECTOR2D
  Context: (MAKE-INSTANCE 'VECTOR2D)
  Parent: (DEFPARAMETER *ORIGIN* (MAKE-INSTANCE 'VECTOR2D))

-------------------------------
WALK(ING):
  Expression: (DEFUN CACHE-ENTRY (KEY)
                (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: DEFUN
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: CACHE-ENTRY
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: (KEY)
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: KEY
  Context: (KEY)
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Context: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: GETHASH
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: KEY
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: (CACHE.TABLE *DEFAULT-CACHE*)
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (DEFUN CACHE-ENTRY (KEY) (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)))
WALK(ING):
  Expression: CACHE.TABLE
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))

-------------------------------
WALK(ING):
  Expression: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
                (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: DEFUN
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (SETF CACHE-ENTRY)
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: SETF
  Context: (SETF CACHE-ENTRY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: CACHE-ENTRY
  Context: (SETF CACHE-ENTRY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (VALUE KEY)
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: VALUE
  Context: (VALUE KEY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: KEY
  Context: (VALUE KEY)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Context: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
             (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: SETF
  Context: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Context: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))
WALK(ING):
  Expression: GETHASH
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
WALK(ING):
  Expression: KEY
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
WALK(ING):
  Expression: (CACHE.TABLE *DEFAULT-CACHE*)
  Context: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
  Parent: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
WALK(ING):
  Expression: CACHE.TABLE
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
WALK(ING):
  Expression: *DEFAULT-CACHE*
  Context: (CACHE.TABLE *DEFAULT-CACHE*)
  Parent: (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*))
WALK(ING):
  Expression: VALUE
  Context: (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE)
  Parent: (DEFUN (SETF CACHE-ENTRY) (VALUE KEY)
            (SETF (GETHASH KEY (CACHE.TABLE *DEFAULT-CACHE*)) VALUE))

-------------------------------
WALK(ING):
  Expression: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
                `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                   ,@BODY))
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: DEFMACRO
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: WITH-VECTOR
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: ((VAR X Y) &BODY BODY)
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: (VAR X Y)
  Context: ((VAR X Y) &BODY BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: VAR
  Context: (VAR X Y)
  Parent: ((VAR X Y) &BODY BODY)
WALK(ING):
  Expression: X
  Context: (VAR X Y)
  Parent: ((VAR X Y) &BODY BODY)
WALK(ING):
  Expression: Y
  Context: (VAR X Y)
  Parent: ((VAR X Y) &BODY BODY)
WALK(ING):
  Expression: &BODY
  Context: ((VAR X Y) &BODY BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: BODY
  Context: ((VAR X Y) &BODY BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                 ,@BODY)
  Context: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
             `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY))
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: SB-INT:QUASIQUOTE
  Context: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
              ,@BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
                ,@BODY)
  Context: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
              ,@BODY)
  Parent: (DEFMACRO WITH-VECTOR ((VAR X Y) &BODY BODY)
            `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
               ,@BODY))
WALK(ING):
  Expression: LET
  Context: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
  Parent: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
WALK(ING):
  Expression: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
  Context: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
  Parent: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
WALK(ING):
  Expression: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
  Context: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
  Parent: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
            ,@BODY)
WALK(ING):
  Expression: ,VAR
  Context: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
  Parent: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
WALK(ING):
  Expression: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Context: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
  Parent: ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
WALK(ING):
  Expression: MAKE-INSTANCE
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: 'VECTOR2D
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: :X
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: ,X
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: :Y
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: ,Y
  Context: (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)
  Parent: (,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y))
WALK(ING):
  Expression: ,@BODY
  Context: (LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)
  Parent: `(LET ((,VAR (MAKE-INSTANCE 'VECTOR2D :X ,X :Y ,Y)))
             ,@BODY)

-------------------------------
WALK(ING):
  Expression: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
WALK(ING):
  Expression: DEFCONSTANT
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
WALK(ING):
  Expression: +UNIT-DISTANCE+
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
WALK(ING):
  Expression: 1.0
  Context: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)
  Parent: (DEFCONSTANT +UNIT-DISTANCE+ 1.0)


Definitions Analysis Trace for d:/quicklisp/local-projects/test-project/src/refs.lisp

-------------------------------
WALK(ING):
  Expression: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: IN-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
WALK(ING):
  Expression: #:TEST-PROJECT-PACKAGE
  Context: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)
  Parent: (IN-PACKAGE #:TEST-PROJECT-PACKAGE)

-------------------------------
WALK(ING):
  Expression: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
                (MAGNITUDE V)
                (V2D-X V)
                (V2D-Y V))
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
             (MAGNITUDE V)
             (V2D-X V)
             (V2D-Y V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: LET
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
             (MAGNITUDE V)
             (V2D-X V)
             (V2D-Y V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
             (MAGNITUDE V)
             (V2D-X V)
             (V2D-Y V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
  Context: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: V
  Context: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
  Parent: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
WALK(ING):
  Expression: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Context: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
  Parent: ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
WALK(ING):
  Expression: MAKE-INSTANCE
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: 'VECTOR2D
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: :X
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: 3.0
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: :Y
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: 4.0
  Context: (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)
  Parent: (V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0))
WALK(ING):
  Expression: (MAGNITUDE V)
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
             (MAGNITUDE V)
             (V2D-X V)
             (V2D-Y V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: MAGNITUDE
  Context: (MAGNITUDE V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: V
  Context: (MAGNITUDE V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: (V2D-X V)
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
             (MAGNITUDE V)
             (V2D-X V)
             (V2D-Y V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: V2D-X
  Context: (V2D-X V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: V
  Context: (V2D-X V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: (V2D-Y V)
  Context: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
             (MAGNITUDE V)
             (V2D-X V)
             (V2D-Y V))
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: V2D-Y
  Context: (V2D-Y V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))
WALK(ING):
  Expression: V
  Context: (V2D-Y V)
  Parent: (LET ((V (MAKE-INSTANCE 'VECTOR2D :X 3.0 :Y 4.0)))
            (MAGNITUDE V)
            (V2D-X V)
            (V2D-Y V))

